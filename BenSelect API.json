{
    "openapi": "3.0.0",
    "info": {
        "title": "BenSelect API",
        "version": "1.0.0"
    },
    "paths": {
        "/api/hr/appointment/cases/{caseGuid}/appointments/update": {
            "post": {
                "tags": [
                    "HrAppointment"
                ],
                "operationId": "HrAppointment_UpdateAppointment",
                "parameters": [
                    {
                        "name": "caseGuid",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "guid"
                        },
                        "x-position": 1
                    }
                ],
                "requestBody": {
                    "x-name": "viewModel",
                    "content": {
                        "application/json": {
                            "schema": {
                                "nullable": true,
                                "oneOf": [
                                    {
                                        "$ref": "#/components/schemas/AppointmentViewModel"
                                    }
                                ]
                            }
                        }
                    },
                    "required": true,
                    "x-position": 2
                },
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AppointmentViewModel"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/hr/appointment/cases/{caseGuid}/appointments": {
            "get": {
                "tags": [
                    "HrAppointment"
                ],
                "operationId": "HrAppointment_GetAppointmentsList",
                "parameters": [
                    {
                        "name": "caseGuid",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "guid"
                        },
                        "x-position": 1
                    },
                    {
                        "name": "searchString",
                        "in": "query",
                        "schema": {
                            "type": "string",
                            "nullable": true
                        },
                        "x-position": 2
                    },
                    {
                        "name": "maxResults",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "default": 0
                        },
                        "x-position": 3
                    },
                    {
                        "name": "startRecord",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "default": 0
                        },
                        "x-position": 4
                    },
                    {
                        "name": "sortBy",
                        "in": "query",
                        "schema": {
                            "type": "string",
                            "nullable": true
                        },
                        "x-position": 5
                    },
                    {
                        "name": "sortDirection",
                        "in": "query",
                        "schema": {
                            "type": "string",
                            "nullable": true
                        },
                        "x-position": 6
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetAppointmentsListResult"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/hr/chat/cases/{caseGuid}/chats": {
            "get": {
                "tags": [
                    "HrChat"
                ],
                "operationId": "HrChat_GetChatList",
                "parameters": [
                    {
                        "name": "caseGuid",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "guid"
                        },
                        "x-position": 1
                    },
                    {
                        "name": "searchString",
                        "in": "query",
                        "schema": {
                            "type": "string",
                            "nullable": true
                        },
                        "x-position": 2
                    },
                    {
                        "name": "maxResults",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "default": 0
                        },
                        "x-position": 3
                    },
                    {
                        "name": "startRecord",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "default": 0
                        },
                        "x-position": 4
                    },
                    {
                        "name": "sortBy",
                        "in": "query",
                        "schema": {
                            "type": "string",
                            "nullable": true
                        },
                        "x-position": 5
                    },
                    {
                        "name": "sortDirection",
                        "in": "query",
                        "schema": {
                            "type": "string",
                            "nullable": true
                        },
                        "x-position": 6
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetChatListResult"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/hr/chat/cases/{caseGuid}/chats/{chatID}/join": {
            "post": {
                "tags": [
                    "HrChat"
                ],
                "operationId": "HrChat_JoinChat",
                "parameters": [
                    {
                        "name": "caseGuid",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "guid"
                        },
                        "x-position": 1
                    },
                    {
                        "name": "chatID",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "nullable": true
                        },
                        "x-position": 2
                    },
                    {
                        "name": "endpoint",
                        "in": "query",
                        "schema": {
                            "default": 0,
                            "oneOf": [
                                {
                                    "$ref": "#/components/schemas/ChatEndpoint"
                                }
                            ]
                        },
                        "x-position": 3
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ChannelViewModel"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/hr/chat/cases/{caseGuid}/chats/{chatID}/leave": {
            "post": {
                "tags": [
                    "HrChat"
                ],
                "operationId": "HrChat_LeaveChat",
                "parameters": [
                    {
                        "name": "caseGuid",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "guid"
                        },
                        "x-position": 1
                    },
                    {
                        "name": "chatID",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "nullable": true
                        },
                        "x-position": 2
                    },
                    {
                        "name": "endpoint",
                        "in": "query",
                        "schema": {
                            "default": 0,
                            "oneOf": [
                                {
                                    "$ref": "#/components/schemas/ChatEndpoint"
                                }
                            ]
                        },
                        "x-position": 3
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/MessageViewModel"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/hr/chat/cases/{caseGuid}/chats/latest": {
            "get": {
                "tags": [
                    "HrChat"
                ],
                "operationId": "HrChat_GetLastestChat",
                "parameters": [
                    {
                        "name": "caseGuid",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "guid"
                        },
                        "x-position": 1
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ChatViewModel"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/hr/chat/cases/{caseGuid}/employees/{employeeGuid}/chats/create": {
            "post": {
                "tags": [
                    "HrChat"
                ],
                "operationId": "HrChat_CreateChat",
                "parameters": [
                    {
                        "name": "caseGuid",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "guid"
                        },
                        "x-position": 1
                    },
                    {
                        "name": "employeeGuid",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "guid"
                        },
                        "x-position": 2
                    },
                    {
                        "name": "endpoint",
                        "in": "query",
                        "schema": {
                            "default": 0,
                            "oneOf": [
                                {
                                    "$ref": "#/components/schemas/ChatEndpoint"
                                }
                            ]
                        },
                        "x-position": 3
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AdminChannelViewModel"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/hr/chat/cases/{caseGuid}/feed": {
            "get": {
                "tags": [
                    "HrChat"
                ],
                "operationId": "HrChat_GetChatFeed",
                "parameters": [
                    {
                        "name": "caseGuid",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "guid"
                        },
                        "x-position": 1
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/ChatActivityViewModel"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/hr/chat/cases/{caseGuid}/chats/{activityId}/viewed": {
            "post": {
                "tags": [
                    "HrChat"
                ],
                "operationId": "HrChat_ViewedChat",
                "parameters": [
                    {
                        "name": "caseGuid",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "guid"
                        },
                        "x-position": 1
                    },
                    {
                        "name": "activityId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "guid"
                        },
                        "x-position": 2
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/hr/cases/{caseUniqueID}/employees": {
            "get": {
                "tags": [
                    "HrEmployee"
                ],
                "operationId": "HrEmployee_Employees",
                "summary": "Find Employees",
                "parameters": [
                    {
                        "name": "caseUniqueID",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "guid"
                        },
                        "x-position": 1
                    },
                    {
                        "name": "searchString",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "maxResults",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 0
                        }
                    },
                    {
                        "name": "startRecord",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 0
                        }
                    },
                    {
                        "name": "ssn",
                        "in": "query",
                        "schema": {
                            "type": "string",
                            "default": ""
                        }
                    },
                    {
                        "name": "sortBy",
                        "in": "query",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "Name"
                            ]
                        }
                    },
                    {
                        "name": "sortDirection",
                        "in": "query",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "Ascending",
                                "Descending"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetHrEmployeeListSearchResult"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "500": {
                        "description": "Invalid user id"
                    }
                }
            },
            "put": {
                "tags": [
                    "HrEmployee"
                ],
                "operationId": "HrEmployee_Employees2",
                "parameters": [
                    {
                        "name": "caseUniqueID",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "guid"
                        },
                        "x-position": 1
                    }
                ],
                "requestBody": {
                    "x-name": "employee",
                    "content": {
                        "application/json": {
                            "schema": {
                                "nullable": true,
                                "oneOf": [
                                    {
                                        "$ref": "#/components/schemas/HrEmployeeViewModel"
                                    }
                                ]
                            }
                        }
                    },
                    "required": true,
                    "x-position": 2
                },
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HrEmployeeViewModel"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/hr/cases/{caseUniqueID}/employees/{employeeUniqueID}": {
            "get": {
                "tags": [
                    "HrEmployee"
                ],
                "operationId": "HrEmployee_Employees3",
                "parameters": [
                    {
                        "name": "caseUniqueID",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "guid"
                        },
                        "x-position": 1
                    },
                    {
                        "name": "employeeUniqueID",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "guid"
                        },
                        "x-position": 2
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HrEmployeeViewModel"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "HrEmployee"
                ],
                "operationId": "HrEmployee_Employees4",
                "parameters": [
                    {
                        "name": "caseUniqueID",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "guid"
                        },
                        "x-position": 1
                    },
                    {
                        "name": "employeeUniqueID",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "guid"
                        },
                        "x-position": 2
                    }
                ],
                "requestBody": {
                    "x-name": "employee",
                    "content": {
                        "application/json": {
                            "schema": {
                                "nullable": true,
                                "oneOf": [
                                    {
                                        "$ref": "#/components/schemas/HrEmployeeViewModel"
                                    }
                                ]
                            }
                        }
                    },
                    "required": true,
                    "x-position": 3
                },
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HrEmployeeViewModel"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "HrEmployee"
                ],
                "operationId": "DeleteEmployee",
                "parameters": [
                    {
                        "name": "caseUniqueID",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "guid"
                        },
                        "x-position": 1
                    },
                    {
                        "name": "employeeUniqueID",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "guid"
                        },
                        "x-position": 2
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "401": {
                        "description": "Access denied"
                    },
                    "404": {
                        "description": "Employee not found"
                    },
                    "500": {
                        "description": "Invalid case id"
                    }
                }
            }
        },
        "/api/hr/cases/{caseUniqueID}/employees/{employeeUniqueID}/status": {
            "get": {
                "tags": [
                    "HrEmployee"
                ],
                "operationId": "HrEmployee_status",
                "parameters": [
                    {
                        "name": "caseUniqueID",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "guid"
                        },
                        "x-position": 1
                    },
                    {
                        "name": "employeeUniqueID",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "guid"
                        },
                        "x-position": 2
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EmployeeActivityViewModel"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/hr/cases/{caseUniqueID}/employees/{employeeUniqueID}/coverages": {
            "get": {
                "tags": [
                    "HrEmployeeCoverages"
                ],
                "operationId": "HrEmployeeCoverages_GetCoverages",
                "parameters": [
                    {
                        "name": "caseUniqueID",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "guid"
                        },
                        "x-position": 1
                    },
                    {
                        "name": "employeeUniqueID",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "guid"
                        },
                        "x-position": 2
                    },
                    {
                        "name": "startDate",
                        "in": "query",
                        "schema": {
                            "type": "string",
                            "format": "date-time",
                            "nullable": true
                        },
                        "x-position": 3
                    },
                    {
                        "name": "endDate",
                        "in": "query",
                        "schema": {
                            "type": "string",
                            "format": "date-time",
                            "nullable": true
                        },
                        "x-position": 4
                    },
                    {
                        "name": "searchType",
                        "in": "query",
                        "schema": {
                            "type": "string",
                            "nullable": true
                        },
                        "x-position": 5
                    },
                    {
                        "name": "searchString",
                        "in": "query",
                        "schema": {
                            "type": "string",
                            "nullable": true
                        },
                        "x-position": 6
                    },
                    {
                        "name": "maxResults",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "default": 0
                        },
                        "x-position": 7
                    },
                    {
                        "name": "startRecord",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "default": 0
                        },
                        "x-position": 8
                    },
                    {
                        "name": "sortBy",
                        "in": "query",
                        "schema": {
                            "type": "string",
                            "nullable": true
                        },
                        "x-position": 9
                    },
                    {
                        "name": "sortDirection",
                        "in": "query",
                        "schema": {
                            "type": "string",
                            "nullable": true
                        },
                        "x-position": 10
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetHrCoveragesListResult"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/hr/cases/{caseUniqueID}/employees/{employeeUniqueID}/coverages/latest": {
            "get": {
                "tags": [
                    "HrEmployeeCoverages"
                ],
                "operationId": "HrEmployeeCoverages_GetLatestCoverages",
                "parameters": [
                    {
                        "name": "caseUniqueID",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "guid"
                        },
                        "x-position": 1
                    },
                    {
                        "name": "employeeUniqueID",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "guid"
                        },
                        "x-position": 2
                    },
                    {
                        "name": "startDate",
                        "in": "query",
                        "schema": {
                            "type": "string",
                            "format": "date-time",
                            "nullable": true
                        },
                        "x-position": 3
                    },
                    {
                        "name": "endDate",
                        "in": "query",
                        "schema": {
                            "type": "string",
                            "format": "date-time",
                            "nullable": true
                        },
                        "x-position": 4
                    },
                    {
                        "name": "searchType",
                        "in": "query",
                        "schema": {
                            "type": "string",
                            "nullable": true
                        },
                        "x-position": 5
                    },
                    {
                        "name": "searchString",
                        "in": "query",
                        "schema": {
                            "type": "string",
                            "nullable": true
                        },
                        "x-position": 6
                    },
                    {
                        "name": "maxResults",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "default": 0
                        },
                        "x-position": 7
                    },
                    {
                        "name": "startRecord",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "default": 0
                        },
                        "x-position": 8
                    },
                    {
                        "name": "sortBy",
                        "in": "query",
                        "schema": {
                            "type": "string",
                            "nullable": true
                        },
                        "x-position": 9
                    },
                    {
                        "name": "sortDirection",
                        "in": "query",
                        "schema": {
                            "type": "string",
                            "nullable": true
                        },
                        "x-position": 10
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetHrCoveragesListResult"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/hr/cases/{caseUniqueID}/employees/{employeeUniqueID}/coverages/{coverageUniqueID}": {
            "get": {
                "tags": [
                    "HrEmployeeCoverages"
                ],
                "operationId": "HrEmployeeCoverages_GetCoverage",
                "parameters": [
                    {
                        "name": "caseUniqueID",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "guid"
                        },
                        "x-position": 1
                    },
                    {
                        "name": "employeeUniqueID",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "guid"
                        },
                        "x-position": 2
                    },
                    {
                        "name": "coverageUniqueID",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "guid"
                        },
                        "x-position": 3
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HrCoverageViewModel"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/hr/cases/{caseUniqueID}/employees/{employeeUniqueID}/dependents/{dependentUniqueID}": {
            "get": {
                "tags": [
                    "HrDependents"
                ],
                "operationId": "HrDependents_Dependents",
                "parameters": [
                    {
                        "name": "caseUniqueID",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "guid"
                        },
                        "x-position": 1
                    },
                    {
                        "name": "employeeUniqueID",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "guid"
                        },
                        "x-position": 2
                    },
                    {
                        "name": "dependentUniqueID",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "guid"
                        },
                        "x-position": 3
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HrDependentViewModel"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "HrDependents"
                ],
                "operationId": "HrDependents_Dependents2",
                "parameters": [
                    {
                        "name": "caseUniqueID",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "guid"
                        },
                        "x-position": 1
                    },
                    {
                        "name": "employeeUniqueID",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "guid"
                        },
                        "x-position": 2
                    },
                    {
                        "name": "dependentUniqueID",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "guid"
                        },
                        "x-position": 3
                    }
                ],
                "requestBody": {
                    "x-name": "dependent",
                    "content": {
                        "application/json": {
                            "schema": {
                                "nullable": true,
                                "oneOf": [
                                    {
                                        "$ref": "#/components/schemas/HrDependentViewModel"
                                    }
                                ]
                            }
                        }
                    },
                    "required": true,
                    "x-position": 4
                },
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HrDependentViewModel"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "HrDependents"
                ],
                "operationId": "HrDependents_Dependents3",
                "parameters": [
                    {
                        "name": "caseUniqueID",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "guid"
                        },
                        "x-position": 1
                    },
                    {
                        "name": "employeeUniqueID",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "guid"
                        },
                        "x-position": 2
                    },
                    {
                        "name": "dependentUniqueID",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "guid"
                        },
                        "x-position": 3
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "401": {
                        "description": "Access denied"
                    },
                    "404": {
                        "description": "Dependent not found"
                    },
                    "500": {
                        "description": "Invalid case id"
                    }
                }
            }
        },
        "/api/hr/cases/{caseUniqueID}/employees/{employeeUniqueID}/dependents": {
            "put": {
                "tags": [
                    "HrDependents"
                ],
                "operationId": "HrDependents_Dependents4",
                "parameters": [
                    {
                        "name": "caseUniqueID",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "guid"
                        },
                        "x-position": 1
                    },
                    {
                        "name": "employeeUniqueID",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "guid"
                        },
                        "x-position": 2
                    }
                ],
                "requestBody": {
                    "x-name": "dependent",
                    "content": {
                        "application/json": {
                            "schema": {
                                "nullable": true,
                                "oneOf": [
                                    {
                                        "$ref": "#/components/schemas/HrDependentViewModel"
                                    }
                                ]
                            }
                        }
                    },
                    "required": true,
                    "x-position": 3
                },
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HrDependentViewModel"
                                }
                            }
                        }
                    }
                }
            },
            "get": {
                "tags": [
                    "HrDependents"
                ],
                "operationId": "HrDependents_Dependents5",
                "parameters": [
                    {
                        "name": "caseUniqueID",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "guid"
                        },
                        "x-position": 1
                    },
                    {
                        "name": "employeeUniqueID",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "guid"
                        },
                        "x-position": 2
                    },
                    {
                        "name": "searchString",
                        "in": "query",
                        "schema": {
                            "type": "string",
                            "nullable": true
                        },
                        "x-position": 3
                    },
                    {
                        "name": "startDate",
                        "in": "query",
                        "schema": {
                            "type": "string",
                            "format": "date-time",
                            "nullable": true
                        },
                        "x-position": 4
                    },
                    {
                        "name": "endDate",
                        "in": "query",
                        "schema": {
                            "type": "string",
                            "format": "date-time",
                            "nullable": true
                        },
                        "x-position": 5
                    },
                    {
                        "name": "relationship",
                        "in": "query",
                        "schema": {
                            "default": 11,
                            "oneOf": [
                                {
                                    "$ref": "#/components/schemas/Relationship2"
                                }
                            ]
                        },
                        "x-position": 6
                    },
                    {
                        "name": "searchType",
                        "in": "query",
                        "schema": {
                            "type": "string",
                            "nullable": true
                        },
                        "x-position": 7
                    },
                    {
                        "name": "maxResults",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "default": 0
                        },
                        "x-position": 8
                    },
                    {
                        "name": "startRecord",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "default": 0
                        },
                        "x-position": 9
                    },
                    {
                        "name": "sortBy",
                        "in": "query",
                        "schema": {
                            "type": "string",
                            "nullable": true
                        },
                        "x-position": 10
                    },
                    {
                        "name": "sortDirection",
                        "in": "query",
                        "schema": {
                            "type": "string",
                            "nullable": true
                        },
                        "x-position": 11
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetHrDependentListSearchResult"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/payroll/cases/{caseUniqueID}/employees/{employeeUniqueID}/payrollcompanies/{payrollUniqueID}/deductions": {
            "get": {
                "tags": [
                    "Payroll"
                ],
                "operationId": "Payroll_Deductions",
                "parameters": [
                    {
                        "name": "caseUniqueID",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "guid"
                        },
                        "x-position": 1
                    },
                    {
                        "name": "employeeUniqueID",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "guid"
                        },
                        "x-position": 2
                    },
                    {
                        "name": "payrollUniqueID",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "guid"
                        },
                        "x-position": 3
                    },
                    {
                        "name": "asOf",
                        "in": "query",
                        "schema": {
                            "type": "string",
                            "default": "",
                            "nullable": true
                        },
                        "x-position": 4
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/PayrollDeductionViewModel"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/setup/cases/{caseUniqueID}": {
            "get": {
                "tags": [
                    "Case setup - cases"
                ],
                "summary": "Gets case by unique id",
                "operationId": "GetCase",
                "parameters": [
                    {
                        "name": "caseUniqueID",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "guid"
                        },
                        "x-position": 1
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SetupCaseViewModel"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Access denied"
                    },
                    "404": {
                        "description": "Case not found"
                    },
                    "500": {
                        "description": "Invalid case id"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Case setup - cases"
                ],
                "summary": "Delete case",
                "operationId": "DeleteCase",
                "parameters": [
                    {
                        "name": "caseUniqueID",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "guid"
                        },
                        "x-position": 1
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "401": {
                        "description": "Access denied"
                    },
                    "404": {
                        "description": "Case not found"
                    },
                    "500": {
                        "description": "Invalid case id"
                    }
                }
            },
            "post": {
                "tags": [
                    "Case setup - cases"
                ],
                "summary": "Update case",
                "operationId": "UpdateCase",
                "parameters": [
                    {
                        "name": "caseUniqueID",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "guid"
                        },
                        "x-position": 1
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/SetupCasesViewModel"
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SetupCaseViewModel"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Access denied"
                    },
                    "404": {
                        "description": "Case not found"
                    },
                    "500": {
                        "description": "Invalid case id"
                    }
                }
            }
        },
        "/api/setup/cases": {
            "get": {
                "tags": [
                    "Case setup - cases"
                ],
                "summary": "Find cases",
                "operationId": "GetCases",
                "parameters": [
                    {
                        "name": "searchString",
                        "in": "query",
                        "description": "Search string. To get all cases use % char",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "maxResults",
                        "in": "query",
                        "description": "Maximum count of cases to get",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "startRecord",
                        "in": "query",
                        "description": "Start record to get from seach result. Used for pagination.",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "sortBy",
                        "in": "query",
                        "description": "Sorting field",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "Name"
                            ]
                        }
                    },
                    {
                        "name": "sortDirection",
                        "in": "query",
                        "description": "Sorting direction",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "Ascending",
                                "Descending"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetCasesListSearchResult"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "500": {
                        "description": "Invalid user id"
                    }
                }
            },
            "put": {
                "tags": [
                    "Case setup - cases"
                ],
                "summary": "Add case",
                "operationId": "PutCase",
                "requestBody": {
                    "x-name": "request",
                    "content": {
                        "application/json": {
                            "schema": {
                                "nullable": true,
                                "oneOf": [
                                    {
                                        "$ref": "#/components/schemas/SetupCasesViewModel"
                                    }
                                ]
                            }
                        }
                    },
                    "required": true,
                    "x-position": 1
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SetupCaseViewModel"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Access denied"
                    },
                    "500": {
                        "description": "Invalid user"
                    }
                }
            }
        },
        "/api/setup/brokerages/{brokerageUniqueID}": {
            "get": {
                "tags": [
                    "Case setup - brokerages"
                ],
                "summary": "Gets brokerage by unique id",
                "operationId": "GetBrokerage",
                "parameters": [
                    {
                        "name": "brokerageUniqueID",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "guid"
                        },
                        "x-position": 1
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SetupBrokerageViewModel"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Brokerage not found"
                    },
                    "500": {
                        "description": "Invalid user"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Case setup - brokerages"
                ],
                "summary": "Delete brokerage",
                "operationId": "DeleteBrokerage",
                "parameters": [
                    {
                        "name": "brokerageUniqueID",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "guid"
                        },
                        "x-position": 1
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "404": {
                        "description": "Brokerage not found"
                    },
                    "500": {
                        "description": "Invalid user"
                    }
                }
            },
            "post": {
                "tags": [
                    "Case setup - brokerages"
                ],
                "summary": "Update brokerage",
                "operationId": "UpdateBroker",
                "parameters": [
                    {
                        "name": "brokerageUniqueID",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "guid"
                        },
                        "x-position": 1
                    }
                ],
                "requestBody": {
                    "x-name": "request",
                    "content": {
                        "application/json": {
                            "schema": {
                                "nullable": true,
                                "oneOf": [
                                    {
                                        "$ref": "#/components/schemas/SetupBrokerageViewModel"
                                    }
                                ]
                            }
                        }
                    },
                    "required": true,
                    "x-position": 1
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SetupBrokerageViewModel"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "404": {
                        "description": "Brokerage not found"
                    },
                    "500": {
                        "description": "Invalid user"
                    }
                }
            }
        },
        "/api/setup/brokerages": {
            "get": {
                "tags": [
                    "Case setup - brokerages"
                ],
                "summary": "Find brokerages",
                "operationId": "GetBrokerages",
                "parameters": [
                    {
                        "name": "searchString",
                        "in": "query",
                        "description": "Search string.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "maxResults",
                        "in": "query",
                        "description": "Maximum count of brokerages to get",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "startRecord",
                        "in": "query",
                        "description": "Start record to get from seach result. Used for pagination.",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "sortBy",
                        "in": "query",
                        "description": "Sorting field",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "Name"
                            ]
                        }
                    },
                    {
                        "name": "sortDirection",
                        "in": "query",
                        "description": "Sorting direction",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "Ascending",
                                "Descending"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetBrokeragesListSearchResult"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "500": {
                        "description": "Invalid user id"
                    }
                }
            },
            "put": {
                "tags": [
                    "Case setup - brokerages"
                ],
                "summary": "Add broker",
                "operationId": "PutBroker",
                "requestBody": {
                    "x-name": "request",
                    "content": {
                        "application/json": {
                            "schema": {
                                "nullable": true,
                                "oneOf": [
                                    {
                                        "$ref": "#/components/schemas/SetupBrokerageViewModel"
                                    }
                                ]
                            }
                        }
                    },
                    "required": true,
                    "x-position": 1
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SetupBrokerageViewModel"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Access denied"
                    },
                    "500": {
                        "description": "Invalid user"
                    }
                }
            }
        },
        "/cases/{caseUniqueID}/brokerage": {
            "get": {
                "tags": [
                    "Case setup - brokerages",
                    "Case setup - cases"
                ],
                "summary": "Gets brokerage by case unique id",
                "operationId": "GetBrokerageForCase",
                "parameters": [
                    {
                        "name": "caseUniqueID",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "guid"
                        },
                        "x-position": 1
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SetupBrokerageViewModel"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "404": {
                        "description": "Not found"
                    }
                }
            }
        },
        "/api/setup/cases/{caseUniqueID}/planYears/{planYearUniqueID}": {
            "get": {
                "tags": [
                    "Case setup - plan years"
                ],
                "summary": "Gets plan year",
                "operationId": "GetPlanYear",
                "parameters": [
                    {
                        "name": "caseUniqueID",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "guid"
                        },
                        "x-position": 1
                    },
                    {
                        "name": "planYearUniqueID",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "guid"
                        },
                        "x-position": 2
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CasePlanYearViewModel"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "404": {
                        "description": "Not found"
                    },
                    "500": {
                        "description": "Invalid case guid"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Case setup - plan years"
                ],
                "summary": "Delete PlanYear",
                "operationId": "DeletePlanYear",
                "parameters": [
                    {
                        "name": "caseUniqueID",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "guid"
                        },
                        "x-position": 1
                    },
                    {
                        "name": "planYearUniqueID",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "guid"
                        },
                        "x-position": 2
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "404": {
                        "description": "PlanYear not found"
                    },
                    "500": {
                        "description": "Invalid case guid"
                    }
                }
            },
            "post": {
                "tags": [
                    "Case setup - plan years"
                ],
                "summary": "Update PlanYear",
                "operationId": "UpdatePlanYear",
                "parameters": [
                    {
                        "name": "caseUniqueID",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "guid"
                        },
                        "x-position": 1
                    },
                    {
                        "name": "planYearUniqueID",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "guid"
                        },
                        "x-position": 2
                    }
                ],
                "requestBody": {
                    "x-name": "request",
                    "content": {
                        "application/json": {
                            "schema": {
                                "nullable": true,
                                "oneOf": [
                                    {
                                        "$ref": "#/components/schemas/CasePlanYearViewModel"
                                    }
                                ]
                            }
                        }
                    },
                    "required": true,
                    "x-position": 1
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CasePlanYearViewModel"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "User does not have access to this case"
                    },
                    "404": {
                        "description": "Plan year not found"
                    },
                    "500": {
                        "description": "Invalid case guid"
                    }
                }
            }
        },
        "/api/setup/cases/{caseUniqueID}/planYears/default": {
            "post": {
                "tags": [
                    "Case setup - plan years"
                ],
                "summary": "Update PlanYear",
                "operationId": "UpdatePlanYearDefault",
                "parameters": [
                    {
                        "name": "caseUniqueID",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "guid"
                        },
                        "x-position": 1
                    }
                ],
                "requestBody": {
                    "x-name": "request",
                    "content": {
                        "application/json": {
                            "schema": {
                                "nullable": true,
                                "oneOf": [
                                    {
                                        "$ref": "#/components/schemas/CasePlanYearViewModel"
                                    }
                                ]
                            }
                        }
                    },
                    "required": true,
                    "x-position": 1
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CasePlanYearViewModel"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "User does not have access to this case"
                    },
                    "500": {
                        "description": "Invalid case guid"
                    }
                }
            }
        },
        "/api/setup/cases/{caseUniqueID}/planYears": {
            "get": {
                "tags": [
                    "Case setup - plan years"
                ],
                "summary": "Gets plan years",
                "operationId": "GetPlanYears",
                "parameters": [
                    {
                        "name": "caseUniqueID",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "guid"
                        },
                        "x-position": 1
                    },
                    {
                        "name": "startDate",
                        "in": "query",
                        "description": "Start date",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date-time"
                        }
                    },
                    {
                        "name": "endtDate",
                        "in": "query",
                        "description": "End date",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date-time"
                        }
                    },
                    {
                        "name": "maxResults",
                        "in": "query",
                        "description": "Maximum count of plan years to get",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "startRecord",
                        "in": "query",
                        "description": "Start record to get from seach result. Used for pagination.",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "sortBy",
                        "in": "query",
                        "description": "Sorting field",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "PlanYearStartDate",
                                "StartEnrollment",
                                "EndOpenEnrollment"
                            ]
                        }
                    },
                    {
                        "name": "sortDirection",
                        "in": "query",
                        "description": "Sorting direction",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "Ascending",
                                "Descending"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetPlanYearsListSearchResult"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "User does not have access to this case"
                    },
                    "500": {
                        "description": "Invalid case guid"
                    }
                }
            },
            "put": {
                "tags": [
                    "Case setup - plan years"
                ],
                "summary": "Add plan year",
                "operationId": "PutPlanYear",
                "parameters": [
                    {
                        "name": "caseUniqueID",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "guid"
                        },
                        "x-position": 1
                    }
                ],
                "requestBody": {
                    "x-name": "request",
                    "content": {
                        "application/json": {
                            "schema": {
                                "nullable": true,
                                "oneOf": [
                                    {
                                        "$ref": "#/components/schemas/CasePlanYearViewModel"
                                    }
                                ]
                            }
                        }
                    },
                    "required": true,
                    "x-position": 1
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CasePlanYearViewModel"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Access denied"
                    },
                    "500": {
                        "description": "Invalid case guid"
                    }
                }
            }
        },
        "/api/setup/employers/{employerUniqueID}": {
            "get": {
                "tags": [
                    "Case setup - employers"
                ],
                "summary": "Gets employer by unique id",
                "operationId": "GetEmployer",
                "parameters": [
                    {
                        "name": "employerUniqueID",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "guid"
                        },
                        "x-position": 1
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SetupEmployerViewModel"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Employer not found"
                    },
                    "500": {
                        "description": "Invalid user"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Case setup - employers"
                ],
                "summary": "Delete employer",
                "operationId": "DeleteEmployer",
                "parameters": [
                    {
                        "name": "employerUniqueID",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "guid"
                        },
                        "x-position": 1
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "404": {
                        "description": "Employer not found"
                    },
                    "500": {
                        "description": "Invalid user"
                    }
                }
            },
            "post": {
                "tags": [
                    "Case setup - employers"
                ],
                "summary": "Update employer",
                "operationId": "UpdateEmployer",
                "parameters": [
                    {
                        "name": "employerUniqueID",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "guid"
                        },
                        "x-position": 1
                    }
                ],
                "requestBody": {
                    "x-name": "request",
                    "content": {
                        "application/json": {
                            "schema": {
                                "nullable": true,
                                "oneOf": [
                                    {
                                        "$ref": "#/components/schemas/SetupEmployerViewModel"
                                    }
                                ]
                            }
                        }
                    },
                    "required": true,
                    "x-position": 1
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SetupEmployerViewModel"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "404": {
                        "description": "Employer not found"
                    },
                    "500": {
                        "description": "Invalid user"
                    }
                }
            }
        },
        "/api/setup/cases/{caseUniqueID}/employer": {
            "get": {
                "tags": [
                    "Case setup - employers",
                    "Case setup - cases"
                ],
                "summary": "Gets employer by case unique id",
                "operationId": "GetEmployerForCase",
                "parameters": [
                    {
                        "name": "caseUniqueID",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "guid"
                        },
                        "x-position": 1
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SetupEmployerViewModel"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "404": {
                        "description": "Not found"
                    }
                }
            }
        },
        "/api/setup/employers/": {
            "get": {
                "tags": [
                    "Case setup - employers"
                ],
                "summary": "Find employers",
                "operationId": "GetEmployers",
                "parameters": [
                    {
                        "name": "searchString",
                        "in": "query",
                        "description": "Search string.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "maxResults",
                        "in": "query",
                        "description": "Maximum count of employers to get",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "startRecord",
                        "in": "query",
                        "description": "Start record to get from seach result. Used for pagination.",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "sortBy",
                        "in": "query",
                        "description": "Sorting field",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "Name"
                            ]
                        }
                    },
                    {
                        "name": "sortDirection",
                        "in": "query",
                        "description": "Sorting direction",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "Ascending",
                                "Descending"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetEmployerListSearchResult"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "500": {
                        "description": "Invalid user id"
                    }
                }
            },
            "put": {
                "tags": [
                    "Case setup - employers"
                ],
                "summary": "Add employer",
                "operationId": "PutEmployer",
                "requestBody": {
                    "x-name": "request",
                    "content": {
                        "application/json": {
                            "schema": {
                                "nullable": true,
                                "oneOf": [
                                    {
                                        "$ref": "#/components/schemas/SetupEmployerViewModel"
                                    }
                                ]
                            }
                        }
                    },
                    "required": true,
                    "x-position": 1
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SetupEmployerViewModel"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Access denied"
                    },
                    "500": {
                        "description": "Invalid user"
                    }
                }
            }
        },
        "/api/setup/cases/{caseUniqueID}/plans": {
            "get": {
                "tags": [
                    "Case setup - plans"
                ],
                "summary": "Find plans",
                "operationId": "GetPlans",
                "parameters": [
                    {
                        "name": "caseUniqueID",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "guid"
                        },
                        "x-position": 1
                    },
                    {
                        "name": "searchString",
                        "in": "query",
                        "description": "Search string.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "maxResults",
                        "in": "query",
                        "description": "Maximum count of plans to get",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "startRecord",
                        "in": "query",
                        "description": "Start record to get from seach result. Used for pagination.",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "sortBy",
                        "in": "query",
                        "description": "Sorting field",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "Name",
                                "PlanSeqNumber"
                            ]
                        }
                    },
                    {
                        "name": "sortDirection",
                        "in": "query",
                        "description": "Sorting direction",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "Ascending",
                                "Descending"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetPlansListSearchResult"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "500": {
                        "description": "Invalid case id"
                    }
                }
            },
            "put": {
                "tags": [
                    "Case setup - plans"
                ],
                "summary": "Add plan",
                "operationId": "PutPlan",
                "parameters": [
                    {
                        "name": "caseUniqueID",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "guid"
                        },
                        "x-position": 1
                    }
                ],
                "requestBody": {
                    "x-name": "request",
                    "content": {
                        "application/json": {
                            "schema": {
                                "nullable": true,
                                "oneOf": [
                                    {
                                        "$ref": "#/components/schemas/SetupPlanViewModel"
                                    }
                                ]
                            }
                        }
                    },
                    "required": true,
                    "x-position": 1
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SetupPlanViewModel"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Access denied"
                    },
                    "500": {
                        "description": "Invalid case guid"
                    }
                }
            }
        },
        "/api/setup/cases/{caseUniqueID}/plans/{planUniqueID}": {
            "get": {
                "tags": [
                    "Case setup - plans"
                ],
                "summary": "Gets plan",
                "operationId": "GetPlan",
                "parameters": [
                    {
                        "name": "caseUniqueID",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "guid"
                        },
                        "x-position": 1
                    },
                    {
                        "name": "planUniqueID",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "guid"
                        },
                        "x-position": 2
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SetupPlanViewModel"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "404": {
                        "description": "Not found"
                    },
                    "500": {
                        "description": "Invalid case guid"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Case setup - plans"
                ],
                "summary": "Delete Plan",
                "operationId": "DeletePlan",
                "parameters": [
                    {
                        "name": "caseUniqueID",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "guid"
                        },
                        "x-position": 1
                    },
                    {
                        "name": "planUniqueID",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "guid"
                        },
                        "x-position": 2
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "404": {
                        "description": "Plan not found"
                    },
                    "500": {
                        "description": "Invalid case guid"
                    }
                }
            },
            "post": {
                "tags": [
                    "Case setup - plans"
                ],
                "summary": "Update Plan",
                "operationId": "UpdatePlan",
                "parameters": [
                    {
                        "name": "caseUniqueID",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "guid"
                        },
                        "x-position": 1
                    },
                    {
                        "name": "planUniqueID",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "guid"
                        },
                        "x-position": 2
                    }
                ],
                "requestBody": {
                    "x-name": "request",
                    "content": {
                        "application/json": {
                            "schema": {
                                "nullable": true,
                                "oneOf": [
                                    {
                                        "$ref": "#/components/schemas/SetupPlanViewModel"
                                    }
                                ]
                            }
                        }
                    },
                    "required": true,
                    "x-position": 1
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SetupPlanViewModel"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "User does not have access to this case"
                    },
                    "404": {
                        "description": "Plan not found"
                    },
                    "500": {
                        "description": "Invalid case guid"
                    }
                }
            }
        },
        "/api/setup/cases/{caseUniqueID}/plans/{planUniqueID}/products": {
            "get": {
                "tags": [
                    "ProductSetup"
                ],
                "operationId": "ProductSetup_products",
                "parameters": [
                    {
                        "name": "caseUniqueID",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "guid"
                        },
                        "x-position": 1
                    },
                    {
                        "name": "planUniqueID",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "guid"
                        },
                        "x-position": 2
                    },
                    {
                        "name": "MaxResults",
                        "in": "query",
                        "description": "Gets or sets maximum results.",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "StartRecord",
                        "in": "query",
                        "description": "Gets or sets start record.",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "SearchString",
                        "in": "query",
                        "description": "Gets or sets search string.",
                        "schema": {
                            "type": "string",
                            "nullable": true
                        }
                    },
                    {
                        "name": "SortBy",
                        "in": "query",
                        "description": "Gets or sets sort by column.",
                        "schema": {
                            "type": "string",
                            "nullable": true
                        }
                    },
                    {
                        "name": "SortDirection",
                        "in": "query",
                        "description": "Gets or sets sort direction.",
                        "schema": {
                            "type": "string",
                            "nullable": true
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetProductListSearchResult"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/setup/cases/{caseUniqueID}/locations/{locationUniqueID}": {
            "get": {
                "tags": [
                    "Case setup - locations"
                ],
                "summary": "Gets location",
                "operationId": "GetLocation",
                "parameters": [
                    {
                        "name": "caseUniqueID",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "guid"
                        },
                        "x-position": 1
                    },
                    {
                        "name": "locationUniqueID",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "guid"
                        },
                        "x-position": 2
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SetupLocationViewModel"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "404": {
                        "description": "Not found"
                    },
                    "500": {
                        "description": "Invalid case guid"
                    }
                }
            }
        },
        "/api/setup/cases/{caseUniqueID}/locations": {
            "get": {
                "tags": [
                    "Case setup - locations"
                ],
                "summary": "Find locations",
                "operationId": "GetLocations",
                "parameters": [
                    {
                        "name": "caseUniqueID",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "guid"
                        },
                        "x-position": 1
                    },
                    {
                        "name": "searchString",
                        "in": "query",
                        "description": "Search string. To get all locations use % char",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "maxResults",
                        "in": "query",
                        "description": "Maximum count of locations to get",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "startRecord",
                        "in": "query",
                        "description": "Start record to get from search result. Used for pagination.",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "sortBy",
                        "in": "query",
                        "description": "Sorting field",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "Name"
                            ]
                        }
                    },
                    {
                        "name": "sortDirection",
                        "in": "query",
                        "description": "Sorting direction",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "Ascending",
                                "Descending"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetLocationsListSearchResult"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "500": {
                        "description": "Invalid case id"
                    }
                }
            }
        },
        "/api/setup/cases/{caseUniqueID}/locations/{locationUniqueID}/jobClasses": {
            "get": {
                "tags": [
                    "Case setup - job classes"
                ],
                "summary": "Find job classes",
                "operationId": "GetJobClasses",
                "parameters": [
                    {
                        "name": "caseUniqueID",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "guid"
                        },
                        "x-position": 1
                    },
                    {
                        "name": "locationUniqueID",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "guid"
                        },
                        "x-position": 2
                    },
                    {
                        "name": "searchString",
                        "in": "query",
                        "description": "Search string.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "maxResults",
                        "in": "query",
                        "description": "Maximum count of job classes to get",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "startRecord",
                        "in": "query",
                        "description": "Start record to get from search result. Used for pagination.",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "sortBy",
                        "in": "query",
                        "description": "Sorting field",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "Name"
                            ]
                        }
                    },
                    {
                        "name": "sortDirection",
                        "in": "query",
                        "description": "Sorting direction",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "Ascending",
                                "Descending"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetJobClassesListSearchResult"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "500": {
                        "description": "Invalid case id"
                    }
                }
            }
        },
        "/api/setup/cases/{caseUniqueID}/locations/{locationUniqueID}/jobClasses/{jobClassUniqueID}": {
            "get": {
                "tags": [
                    "Case setup - job classes"
                ],
                "summary": "Gets job class",
                "operationId": "GetJobClass",
                "parameters": [
                    {
                        "name": "caseUniqueID",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "guid"
                        },
                        "x-position": 1
                    },
                    {
                        "name": "locationUniqueID",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "guid"
                        },
                        "x-position": 2
                    },
                    {
                        "name": "jobClassUniqueID",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "guid"
                        },
                        "x-position": 3
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SetupJobClassViewModel"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "404": {
                        "description": "Not found"
                    },
                    "500": {
                        "description": "Invalid case guid"
                    }
                }
            }
        },
        "/api/setup/cases/{caseUniqueID}/plans/{planUniqueID}/planYears/{planYearUniqueID}/rateGroups": {
            "get": {
                "tags": [
                    "RateGroupSetup"
                ],
                "operationId": "RateGroupSetup_rateGroups",
                "parameters": [
                    {
                        "name": "caseUniqueID",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "guid"
                        },
                        "x-position": 1
                    },
                    {
                        "name": "planUniqueID",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "guid"
                        },
                        "x-position": 2
                    },
                    {
                        "name": "planYearUniqueID",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "guid"
                        },
                        "x-position": 3
                    },
                    {
                        "name": "MaxResults",
                        "in": "query",
                        "description": "Gets or sets maximum results.",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "StartRecord",
                        "in": "query",
                        "description": "Gets or sets start record.",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "SearchString",
                        "in": "query",
                        "description": "Gets or sets search string.",
                        "schema": {
                            "type": "string",
                            "nullable": true
                        }
                    },
                    {
                        "name": "SortBy",
                        "in": "query",
                        "description": "Gets or sets sort by column.",
                        "schema": {
                            "type": "string",
                            "nullable": true
                        }
                    },
                    {
                        "name": "SortDirection",
                        "in": "query",
                        "description": "Gets or sets sort direction.",
                        "schema": {
                            "type": "string",
                            "nullable": true
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetRateGroupListSearchResult"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/setup/cases/{caseUniqueID}/plans/{planUniqueID}/planYears/default/rateGroups": {
            "get": {
                "tags": [
                    "RateGroupSetup"
                ],
                "operationId": "RateGroupSetup_rateGroups2",
                "parameters": [
                    {
                        "name": "caseUniqueID",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "guid"
                        },
                        "x-position": 1
                    },
                    {
                        "name": "planUniqueID",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "guid"
                        },
                        "x-position": 2
                    },
                    {
                        "name": "MaxResults",
                        "in": "query",
                        "description": "Gets or sets maximum results.",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "StartRecord",
                        "in": "query",
                        "description": "Gets or sets start record.",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "SearchString",
                        "in": "query",
                        "description": "Gets or sets search string.",
                        "schema": {
                            "type": "string",
                            "nullable": true
                        }
                    },
                    {
                        "name": "SortBy",
                        "in": "query",
                        "description": "Gets or sets sort by column.",
                        "schema": {
                            "type": "string",
                            "nullable": true
                        }
                    },
                    {
                        "name": "SortDirection",
                        "in": "query",
                        "description": "Gets or sets sort direction.",
                        "schema": {
                            "type": "string",
                            "nullable": true
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetRateGroupListSearchResult"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/setup/cases/{caseUniqueID}/plans/{planUniqueID}/planYears/{planYearUniqueID}/rateGroups/{rateGroupUniqueID}": {
            "get": {
                "tags": [
                    "RateGroupSetup"
                ],
                "operationId": "RateGroupSetup_rateGroups3",
                "parameters": [
                    {
                        "name": "caseUniqueID",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "guid"
                        },
                        "x-position": 1
                    },
                    {
                        "name": "planUniqueID",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "guid"
                        },
                        "x-position": 2
                    },
                    {
                        "name": "planYearUniqueID",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "guid"
                        },
                        "x-position": 3
                    },
                    {
                        "name": "rateGroupUniqueID",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "guid"
                        },
                        "x-position": 4
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetRateGroupListSearchResult"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/setup/cases/{caseUniqueID}/plans/{planUniqueID}/planYears/default/rateGroups/{rateGroupUniqueID}": {
            "get": {
                "tags": [
                    "RateGroupSetup"
                ],
                "operationId": "RateGroupSetup_rateGroups4",
                "parameters": [
                    {
                        "name": "caseUniqueID",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "guid"
                        },
                        "x-position": 1
                    },
                    {
                        "name": "planUniqueID",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "guid"
                        },
                        "x-position": 2
                    },
                    {
                        "name": "rateGroupUniqueID",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "guid"
                        },
                        "x-position": 3
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetRateGroupListSearchResult"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/setup/cases/{caseUniqueID}/plans/{planUniqueID}/planYears/{planYearUniqueID}/rateGroups/{rateGroupUniqueID}/enrollmentRules": {
            "get": {
                "tags": [
                    "EnrollmentRulesSetup"
                ],
                "operationId": "EnrollmentRulesSetup_enrollmentRules",
                "parameters": [
                    {
                        "name": "caseUniqueID",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "guid"
                        },
                        "x-position": 1
                    },
                    {
                        "name": "planUniqueID",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "guid"
                        },
                        "x-position": 2
                    },
                    {
                        "name": "planYearUniqueID",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "guid"
                        },
                        "x-position": 3
                    },
                    {
                        "name": "rateGroupUniqueID",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "guid"
                        },
                        "x-position": 4
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SetupEnrollmentRulesViewModel"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/setup/cases/{caseUniqueID}/plans/{planUniqueID}/planYears/default/rateGroups/{rateGroupUniqueID}/enrollmentRules": {
            "get": {
                "tags": [
                    "EnrollmentRulesSetup"
                ],
                "operationId": "EnrollmentRulesSetup_enrollmentRules2",
                "parameters": [
                    {
                        "name": "caseUniqueID",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "guid"
                        },
                        "x-position": 1
                    },
                    {
                        "name": "planUniqueID",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "guid"
                        },
                        "x-position": 2
                    },
                    {
                        "name": "rateGroupUniqueID",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "guid"
                        },
                        "x-position": 3
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SetupEnrollmentRulesViewModel"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/setup/cases/{caseUniqueID}/plans/{planUniqueID}/planYears/default/rateGroups/{rateGroupUniqueID}/eligibleProducts": {
            "get": {
                "tags": [
                    "Case setup - eligible products"
                ],
                "summary": "Find eligible products",
                "operationId": "GetEligibleProductsDPY",
                "parameters": [
                    {
                        "name": "caseUniqueID",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "guid"
                        },
                        "x-position": 1
                    },
                    {
                        "name": "planUniqueID",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "guid"
                        },
                        "x-position": 2
                    },
                    {
                        "name": "rateGroupUniqueID",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "guid"
                        },
                        "x-position": 3
                    },
                    {
                        "name": "searchString",
                        "in": "query",
                        "description": "Search string.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "maxResults",
                        "in": "query",
                        "description": "Maximum count of eligible products to get",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "startRecord",
                        "in": "query",
                        "description": "Start record to get from search result. Used for pagination.",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "sortBy",
                        "in": "query",
                        "description": "Sorting field",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "ProductName"
                            ]
                        }
                    },
                    {
                        "name": "sortDirection",
                        "in": "query",
                        "description": "Sorting direction",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "Ascending",
                                "Descending"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetEligibleProductsListSearchResult"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "500": {
                        "description": "Invalid case id"
                    }
                }
            }
        },
        "/api/setup/cases/{caseUniqueID}/plans/{planUniqueID}/planYears/{planyearUniqueID}/rateGroups/{rateGroupUniqueID}/eligibleProducts": {
            "get": {
                "tags": [
                    "Case setup - eligible products"
                ],
                "summary": "Find eligible products",
                "operationId": "GetEligibleProducts",
                "parameters": [
                    {
                        "name": "caseUniqueID",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "guid"
                        },
                        "x-position": 1
                    },
                    {
                        "name": "planUniqueID",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "guid"
                        },
                        "x-position": 2
                    },
                    {
                        "name": "planyearUniqueID",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "guid"
                        },
                        "x-position": 3
                    },
                    {
                        "name": "rateGroupUniqueID",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "guid"
                        },
                        "x-position": 4
                    },
                    {
                        "name": "searchString",
                        "in": "query",
                        "description": "Search string.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "maxResults",
                        "in": "query",
                        "description": "Maximum count of eligible products to get",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "startRecord",
                        "in": "query",
                        "description": "Start record to get from search result. Used for pagination.",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "sortBy",
                        "in": "query",
                        "description": "Sorting field",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "ProductName"
                            ]
                        }
                    },
                    {
                        "name": "sortDirection",
                        "in": "query",
                        "description": "Sorting direction",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "Ascending",
                                "Descending"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetEligibleProductsListSearchResult"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "500": {
                        "description": "Invalid case id"
                    }
                }
            }
        },
        "/api/user/token": {
            "post": {
                "tags": [
                    "Token"
                ],
                "operationId": "Token_AuthenticateUser",
                "requestBody": {
                    "x-name": "request",
                    "content": {
                        "application/json": {
                            "schema": {
                                "nullable": true,
                                "oneOf": [
                                    {
                                        "$ref": "#/components/schemas/AccessTokenRequest"
                                    }
                                ]
                            }
                        }
                    },
                    "required": true,
                    "x-position": 1
                },
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AccessTokenResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/echo/webhook/{company}": {
            "post": {
                "tags": [
                    "WebHook"
                ],
                "operationId": "WebHook",
                "parameters": [
                    {
                        "name": "company",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "x-position": 1
                    }
                ],
                "requestBody": {
                    "x-name": "request",
                    "content": {
                        "application/json": {
                            "schema": {
                                "nullable": true
                            }
                        }
                    },
                    "required": true,
                    "x-position": 2
                },
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        }
    },
    "components": {
        "schemas": {
            "AccessTokenRequest": {
                "type": "object",
                "description": "Acess token request.",
                "additionalProperties": false,
                "properties": {
                    "grant_type": {
                        "type": "string",
                        "description": "Grant type",
                        "nullable": true
                    },
                    "code": {
                        "type": "string",
                        "description": "Login token",
                        "nullable": true
                    },
                    "redirect_uri": {
                        "type": "string",
                        "description": "Redirect URI",
                        "nullable": true
                    },
                    "client_id": {
                        "type": "string",
                        "description": "Client ID",
                        "nullable": true
                    },
                    "client_secret": {
                        "type": "string",
                        "description": "Password",
                        "nullable": true
                    },
                    "username": {
                        "type": "string",
                        "description": "Username",
                        "nullable": true
                    },
                    "password": {
                        "type": "string",
                        "description": "Password",
                        "nullable": true
                    },
                    "refresh_token": {
                        "type": "string",
                        "description": "Refresh token",
                        "nullable": true
                    },
                    "scope": {
                        "type": "string",
                        "description": "Scope",
                        "nullable": true
                    },
                    "x-Selerix-TrackingId": {
                        "type": "string",
                        "description": "Tracking id.",
                        "nullable": true
                    },
                    "x-Selerix-CaseUniqueId": {
                        "type": "string",
                        "description": "Unique id of case employee logs in.",
                        "format": "guid",
                        "nullable": true
                    },
                    "x-Selerix-CompanyCode": {
                        "type": "string",
                        "description": "Gets or sets the company code.",
                        "nullable": true
                    },
                    "x-Selerix-EmployerVirtualPath": {
                        "type": "string",
                        "description": "Employer virtual path.",
                        "nullable": true
                    },
                    "x-Selerix-TwoFactorAuthenticationOptionId": {
                        "type": "string",
                        "description": "Gets or sets id of the two factor authentication option to use.",
                        "nullable": true
                    },
                    "x-Selerix-TwoFactorAuthenticationToken": {
                        "type": "string",
                        "description": "Gets or sets two factor authentication token.",
                        "nullable": true
                    },
                    "x-Selerix-TwoFactorAuthenticationCode": {
                        "type": "string",
                        "description": "Gets or sets two factor authentication code.",
                        "nullable": true
                    },
                    "x-Selerix-TextMessageOptIn": {
                        "type": "boolean",
                        "description": "Gets or sets if employee opted in to text message delivery.",
                        "nullable": true
                    }
                }
            },
            "AccessTokenResponse": {
                "type": "object",
                "description": "Access token response",
                "additionalProperties": false,
                "properties": {
                    "access_token": {
                        "type": "string",
                        "description": "Access token",
                        "nullable": true
                    },
                    "token_type": {
                        "type": "string",
                        "description": "Token type",
                        "nullable": true
                    },
                    "expires_in": {
                        "type": "integer",
                        "description": "Expiration in seconds",
                        "format": "int32"
                    },
                    "refresh_token": {
                        "type": "string",
                        "description": "Refresh token",
                        "nullable": true
                    },
                    "error": {
                        "type": "string",
                        "description": "Error",
                        "nullable": true
                    },
                    "resourceId": {
                        "type": "string",
                        "description": "Resource id.",
                        "nullable": true
                    },
                    "x-Selerix-Cases": {
                        "type": "array",
                        "description": "List of cases employee can login.",
                        "nullable": true,
                        "items": {
                            "$ref": "#/components/schemas/CaseListItemViewModel"
                        }
                    },
                    "x-Selerix-TwoFactorAuthenticationRequired": {
                        "type": "boolean",
                        "description": "Gets or sets if two factor authentication is required."
                    },
                    "x-Selerix-TwoFactorAuthenticationOptions": {
                        "type": "array",
                        "description": "Gets or sets list of available two factor authentication options.",
                        "nullable": true,
                        "items": {
                            "$ref": "#/components/schemas/TwoFactorAuthenticationOptionViewModel"
                        }
                    },
                    "x-Selerix-TwoFactorAuthenticationToken": {
                        "type": "string",
                        "description": "Gets or sets two factor authentication token.",
                        "nullable": true
                    },
                    "x-Selerix-AskTextMessagePermission": {
                        "type": "boolean",
                        "description": "Gets or sets if two factor authentication is required."
                    },
                    "x-Selerix-CompanyCode": {
                        "type": "string",
                        "description": "Gets or sets the company code.",
                        "nullable": true
                    }
                }
            },
            "TwoFactorAuthenticationOptionViewModel": {
                "type": "object",
                "description": "Two factor authentication option.",
                "additionalProperties": false,
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Gets or sets id.",
                        "nullable": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Gets or sets name.",
                        "nullable": true
                    },
                    "type": {
                        "type": "string",
                        "description": "Gets or sets type. Typically 'Email' or 'Phone'.",
                        "nullable": true
                    }
                }
            },
            "AppointmentViewModel": {
                "type": "object",
                "description": "Appointment viwe model",
                "additionalProperties": false,
                "properties": {
                    "uniqueid": {
                        "type": "string",
                        "description": "Gets or sets the unique identifier.",
                        "format": "guid"
                    },
                    "employee": {
                        "description": "Gets or sets the employee.",
                        "nullable": true,
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/EmployeeViewModel"
                            }
                        ]
                    },
                    "active": {
                        "type": "boolean",
                        "description": "Gets or sets a value indicating whether this AppointmentViewModel is active."
                    },
                    "requesttime": {
                        "type": "string",
                        "description": "Gets or sets the employee request time.",
                        "format": "date-time"
                    },
                    "user": {
                        "description": "Gets or sets the user.",
                        "nullable": true,
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/UserViewModel"
                            }
                        ]
                    },
                    "responsetime": {
                        "type": "string",
                        "description": "Gets or sets the user response time.",
                        "format": "date-time",
                        "nullable": true
                    },
                    "preferredtime": {
                        "type": "string",
                        "description": "Gets or sets the prefered time.",
                        "nullable": true
                    },
                    "contactmethod": {
                        "description": "Gets or sets the contact method.",
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/ContactMethod"
                            }
                        ]
                    },
                    "approvetext": {
                        "type": "boolean",
                        "description": "Gets or sets a value indicating whether [approve text]."
                    },
                    "phonenumber": {
                        "type": "string",
                        "description": "Gets or sets the phone number.",
                        "nullable": true
                    },
                    "email": {
                        "type": "string",
                        "description": "Gets or sets the email.",
                        "nullable": true
                    },
                    "notes": {
                        "type": "string",
                        "description": "Gets or sets the notes.",
                        "nullable": true
                    },
                    "responsetext": {
                        "type": "string",
                        "description": "Gets or sets the response text.",
                        "nullable": true
                    }
                }
            },
            "EmployeeViewModel": {
                "type": "object",
                "description": "employee view model",
                "additionalProperties": false,
                "properties": {
                    "uniqueid": {
                        "type": "string",
                        "description": "Gets or sets unique id.",
                        "format": "guid"
                    },
                    "firstname": {
                        "type": "string",
                        "description": "Gets or sets the first name.",
                        "nullable": true
                    },
                    "lastname": {
                        "type": "string",
                        "description": "Gets or sets the last name.",
                        "nullable": true
                    }
                }
            },
            "UserViewModel": {
                "type": "object",
                "description": "user view model",
                "additionalProperties": false,
                "properties": {
                    "uniqueid": {
                        "type": "string",
                        "description": "Gets or sets unique id.",
                        "format": "guid"
                    },
                    "fullname": {
                        "type": "string",
                        "description": "Gets or sets the full name.",
                        "nullable": true
                    }
                }
            },
            "ContactMethod": {
                "type": "integer",
                "description": "Contact method.",
                "x-enumNames": [
                    "NotSet",
                    "Phone",
                    "Email",
                    "Text"
                ],
                "enum": [
                    0,
                    1,
                    2,
                    3
                ]
            },
            "GetAppointmentsListResult": {
                "type": "object",
                "description": "Appointment list result",
                "additionalProperties": false,
                "properties": {
                    "recordsCount": {
                        "type": "integer",
                        "description": "Gets/Sets total records count.",
                        "format": "int32"
                    },
                    "appointments": {
                        "type": "array",
                        "description": "Gets or sets list of appointments.",
                        "nullable": true,
                        "items": {
                            "$ref": "#/components/schemas/AppointmentViewModel"
                        }
                    }
                }
            },
            "GetChatListResult": {
                "type": "object",
                "description": "Chat list result",
                "additionalProperties": false,
                "properties": {
                    "recordsCount": {
                        "type": "integer",
                        "description": "Gets/Sets total records count.",
                        "format": "int32"
                    },
                    "chats": {
                        "type": "array",
                        "description": "Gets/Sets list of chats.",
                        "nullable": true,
                        "items": {
                            "$ref": "#/components/schemas/ChatViewModel"
                        }
                    }
                }
            },
            "ChatViewModel": {
                "type": "object",
                "description": "Chat view model",
                "additionalProperties": false,
                "properties": {
                    "uniqueid": {
                        "type": "string",
                        "description": "Gets or sets the unique identifier.",
                        "format": "guid"
                    },
                    "chatid": {
                        "type": "string",
                        "description": "Gets or sets chat id.",
                        "nullable": true
                    },
                    "employee": {
                        "description": "Gets or sets the Member.",
                        "nullable": true,
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/ChatEmployeeViewModel"
                            }
                        ]
                    },
                    "requesttime": {
                        "type": "string",
                        "description": "Gets or sets the request time.",
                        "format": "date-time"
                    },
                    "user": {
                        "description": "Gets or sets the user.",
                        "nullable": true,
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/ChatUserViewModel"
                            }
                        ]
                    },
                    "responsetime": {
                        "type": "string",
                        "description": "Gets or sets the response time.",
                        "format": "date-time",
                        "nullable": true
                    },
                    "active": {
                        "type": "boolean",
                        "description": "Gets or sets a value indicating whether this ChatViewModel is active."
                    }
                }
            },
            "ChatEmployeeViewModel": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/EmployeeViewModel"
                    },
                    {
                        "type": "object",
                        "description": "chat employee view model",
                        "additionalProperties": false,
                        "properties": {
                            "chatidentity": {
                                "type": "string",
                                "description": "Gets or sets the chat identity.",
                                "format": "guid",
                                "nullable": true
                            },
                            "phone": {
                                "type": "string",
                                "description": "Gets or sets the phone.",
                                "nullable": true
                            },
                            "email": {
                                "type": "string",
                                "description": "Gets or sets the email.",
                                "nullable": true
                            }
                        }
                    }
                ]
            },
            "ChatUserViewModel": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/UserViewModel"
                    },
                    {
                        "type": "object",
                        "description": "chat user view model",
                        "additionalProperties": false,
                        "properties": {
                            "chatidentity": {
                                "type": "string",
                                "description": "Gets or sets the chat identity.",
                                "format": "guid",
                                "nullable": true
                            }
                        }
                    }
                ]
            },
            "ChannelViewModel": {
                "type": "object",
                "description": "Channel view model",
                "additionalProperties": false,
                "properties": {
                    "chatid": {
                        "type": "string",
                        "description": "Gets or sets the chat identifier.",
                        "format": "guid"
                    },
                    "channelsid": {
                        "type": "string",
                        "description": "Gets or sets the channel sid.",
                        "nullable": true
                    },
                    "token": {
                        "type": "string",
                        "description": "Gets or sets the token.",
                        "nullable": true
                    },
                    "identity": {
                        "type": "string",
                        "description": "Gets or sets the identity.",
                        "format": "guid"
                    },
                    "requesttime": {
                        "type": "string",
                        "description": "Gets or sets the request time.",
                        "format": "date-time"
                    }
                }
            },
            "ChatEndpoint": {
                "type": "integer",
                "description": "Chat endpoint",
                "x-enumNames": [
                    "Browser"
                ],
                "enum": [
                    0
                ]
            },
            "MessageViewModel": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "Status": {
                        "$ref": "#/components/schemas/ResultCode"
                    },
                    "Message": {
                        "type": "string",
                        "nullable": true
                    }
                }
            },
            "ResultCode": {
                "type": "integer",
                "description": "",
                "x-enumNames": [
                    "OK",
                    "BadRequest",
                    "Unauthorized",
                    "NotFound",
                    "UnsuportedMediaType",
                    "UnprocessableEntity",
                    "InternalServerError"
                ],
                "enum": [
                    200,
                    400,
                    401,
                    404,
                    415,
                    422,
                    500
                ]
            },
            "AdminChannelViewModel": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/ChannelViewModel"
                    },
                    {
                        "type": "object",
                        "description": "Admin channel view model",
                        "additionalProperties": false,
                        "properties": {
                            "employeetoken": {
                                "type": "string",
                                "description": "Gets or sets the employee token.",
                                "nullable": true
                            },
                            "employeeidentity": {
                                "type": "string",
                                "description": "Gets or sets the employee identity.",
                                "format": "guid"
                            }
                        }
                    }
                ]
            },
            "ChatActivityViewModel": {
                "type": "object",
                "description": "Chat Activity View Model",
                "additionalProperties": false,
                "properties": {
                    "activityId": {
                        "type": "string",
                        "description": "Gets or sets ActivityId.",
                        "format": "guid"
                    },
                    "name": {
                        "type": "string",
                        "description": "Gets or sets the name.",
                        "nullable": true
                    },
                    "referenceId": {
                        "type": "string",
                        "description": "Gets or sets ReferenceId. Guid of activity creator",
                        "format": "guid"
                    },
                    "caseId": {
                        "type": "string",
                        "description": "Gets or sets CaseId.",
                        "format": "guid"
                    },
                    "description": {
                        "type": "string",
                        "description": "Gets or sets Description.",
                        "nullable": true
                    },
                    "responseDescription": {
                        "type": "string",
                        "description": "Gets or sets the ResponseDescription.",
                        "nullable": true
                    },
                    "activityTime": {
                        "type": "string",
                        "description": "Gets or sets ActivityTime.",
                        "format": "date-time"
                    },
                    "attachmentId": {
                        "type": "string",
                        "description": "Gets or sets AttachmentId.",
                        "format": "guid",
                        "nullable": true
                    },
                    "viewed": {
                        "type": "boolean",
                        "description": "Gets or sets Viewed."
                    },
                    "requestorStatus": {
                        "type": "integer",
                        "description": "Gets or sets RequestorStatus.",
                        "format": "int32"
                    },
                    "activityTypeId": {
                        "type": "integer",
                        "description": "Gets or sets ActivityTypeID.",
                        "format": "int32"
                    },
                    "activityFeedResponseTypeId": {
                        "type": "integer",
                        "description": "Gets or sets ActivityFeedResponseTypeID",
                        "format": "int32",
                        "nullable": true
                    }
                }
            },
            "GetHrEmployeeListSearchResult": {
                "type": "object",
                "description": "Get Employee List Search Result",
                "additionalProperties": false,
                "properties": {
                    "recordsCount": {
                        "type": "integer",
                        "description": "Gets/Sets total records count.",
                        "format": "int32"
                    },
                    "employees": {
                        "type": "array",
                        "description": "Gets/Sets list of cases.",
                        "nullable": true,
                        "items": {
                            "$ref": "#/components/schemas/HrEmployeeListViewModel"
                        }
                    }
                }
            },
            "HrEmployeeListViewModel": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/HrBaseViewModel"
                    },
                    {
                        "type": "object",
                        "description": "Employee List ViewModel",
                        "additionalProperties": false,
                        "properties": {
                            "eid": {
                                "type": "string",
                                "description": "Gets or sets EID.",
                                "nullable": true
                            },
                            "jobClass": {
                                "description": "Gets or sets the Job Class",
                                "nullable": true,
                                "oneOf": [
                                    {
                                        "$ref": "#/components/schemas/HrJobClassViewModel"
                                    }
                                ]
                            },
                            "location": {
                                "description": "Gets or sets the Location",
                                "nullable": true,
                                "oneOf": [
                                    {
                                        "$ref": "#/components/schemas/HrLocationViewModel"
                                    }
                                ]
                            },
                            "payGroup": {
                                "description": "Gets or sets the PayGroup",
                                "nullable": true,
                                "oneOf": [
                                    {
                                        "$ref": "#/components/schemas/HrPayGroupViewModel"
                                    }
                                ]
                            },
                            "employmentStatus": {
                                "type": "string",
                                "description": "Gets or sets EmploymentStatus.",
                                "nullable": true
                            },
                            "enrollmentStatus": {
                                "type": "string",
                                "description": "Gets or sets EnrollmentStatus.",
                                "nullable": true
                            }
                        }
                    }
                ]
            },
            "HrJobClassViewModel": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/HrBaseViewModel"
                    },
                    {
                        "type": "object",
                        "description": "Job Class View Model",
                        "additionalProperties": false
                    }
                ]
            },
            "HrBaseViewModel": {
                "type": "object",
                "description": "Base class for HR api models",
                "additionalProperties": false,
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Gets or sets name.",
                        "nullable": true
                    },
                    "uniqueid": {
                        "type": "string",
                        "description": "Gets or sets uniqueid.",
                        "format": "guid",
                        "nullable": true
                    },
                    "asOfDate": {
                        "type": "string",
                        "description": "Gets or sets as of date.",
                        "format": "date-time",
                        "nullable": true
                    }
                }
            },
            "HrLocationViewModel": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/HrBaseViewModel"
                    },
                    {
                        "type": "object",
                        "description": "Location View Model",
                        "additionalProperties": false
                    }
                ]
            },
            "HrPayGroupViewModel": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/HrBaseViewModel"
                    },
                    {
                        "type": "object",
                        "description": "Pay Group View Model",
                        "additionalProperties": false
                    }
                ]
            },
            "HrEmployeeViewModel": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/HrPersonViewModel"
                    },
                    {
                        "type": "object",
                        "description": "Employee ViewModel",
                        "additionalProperties": false,
                        "properties": {
                            "eid": {
                                "type": "string",
                                "description": "Gets or sets EID.",
                                "nullable": true
                            },
                            "jobClass": {
                                "description": "Gets or sets the Job Class",
                                "nullable": true,
                                "oneOf": [
                                    {
                                        "$ref": "#/components/schemas/HrJobClassViewModel"
                                    }
                                ]
                            },
                            "department": {
                                "description": "Gets or sets the Department",
                                "nullable": true,
                                "oneOf": [
                                    {
                                        "$ref": "#/components/schemas/HrDepartmentViewModel"
                                    }
                                ]
                            },
                            "location": {
                                "description": "Gets or sets the Location",
                                "nullable": true,
                                "oneOf": [
                                    {
                                        "$ref": "#/components/schemas/HrLocationViewModel"
                                    }
                                ]
                            },
                            "payGroup": {
                                "description": "Gets or sets the PayGroup",
                                "nullable": true,
                                "oneOf": [
                                    {
                                        "$ref": "#/components/schemas/HrPayGroupViewModel"
                                    }
                                ]
                            },
                            "employmentStatus": {
                                "type": "string",
                                "description": "Gets or sets EmploymentStatus.",
                                "nullable": true
                            },
                            "enrollmentStatus": {
                                "type": "string",
                                "description": "Gets or sets EnrollmentStatus.",
                                "nullable": true
                            },
                            "personalEmail": {
                                "type": "string",
                                "description": "Personal Email",
                                "nullable": true
                            },
                            "dateOfHire": {
                                "type": "string",
                                "description": "Date of hire",
                                "format": "date-time",
                                "nullable": true
                            },
                            "eligibilityDate": {
                                "type": "string",
                                "description": "Eligibility Date",
                                "format": "date-time",
                                "nullable": true
                            },
                            "terminationDate": {
                                "type": "string",
                                "description": "Termination Date",
                                "format": "date-time",
                                "nullable": true
                            },
                            "title": {
                                "type": "string",
                                "description": "Title",
                                "nullable": true
                            },
                            "salary": {
                                "type": "number",
                                "description": "Salary",
                                "format": "decimal",
                                "nullable": true
                            },
                            "maritalStatus": {
                                "type": "string",
                                "description": "Marital Status",
                                "nullable": true
                            },
                            "userID": {
                                "type": "string",
                                "description": "User ID",
                                "nullable": true
                            },
                            "hoursPerWeek": {
                                "type": "number",
                                "description": "Hours Per Week",
                                "format": "decimal",
                                "nullable": true
                            },
                            "hourlyWage": {
                                "type": "number",
                                "description": "Hourly Wage",
                                "format": "decimal",
                                "nullable": true
                            },
                            "fteRate": {
                                "type": "number",
                                "description": "FTE Rate",
                                "format": "decimal",
                                "nullable": true
                            }
                        }
                    }
                ]
            },
            "HrDepartmentViewModel": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/HrBaseViewModel"
                    },
                    {
                        "type": "object",
                        "description": "Department View Model",
                        "additionalProperties": false
                    }
                ]
            },
            "HrPersonViewModel": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/HrBaseViewModel"
                    },
                    {
                        "type": "object",
                        "description": "HR person view model",
                        "additionalProperties": false,
                        "properties": {
                            "firstName": {
                                "type": "string",
                                "description": "First Name",
                                "nullable": true
                            },
                            "lastName": {
                                "type": "string",
                                "description": "Last Name",
                                "nullable": true
                            },
                            "middleInitial": {
                                "type": "string",
                                "description": "Middle Initial",
                                "nullable": true
                            },
                            "suffix": {
                                "type": "string",
                                "description": "Suffix",
                                "nullable": true
                            },
                            "gender": {
                                "description": "Gender",
                                "oneOf": [
                                    {
                                        "$ref": "#/components/schemas/Gender"
                                    }
                                ]
                            },
                            "ssn": {
                                "type": "string",
                                "description": "SSN",
                                "nullable": true
                            },
                            "dateOfBirth": {
                                "type": "string",
                                "description": "Date of birth",
                                "format": "date-time",
                                "nullable": true
                            },
                            "homeAddress": {
                                "description": "Home Address",
                                "nullable": true,
                                "oneOf": [
                                    {
                                        "$ref": "#/components/schemas/HrAddressViewModel"
                                    }
                                ]
                            },
                            "mailingAddress": {
                                "description": "Mailing Address",
                                "nullable": true,
                                "oneOf": [
                                    {
                                        "$ref": "#/components/schemas/HrAddressViewModel"
                                    }
                                ]
                            },
                            "homePhone": {
                                "type": "string",
                                "description": "Home Phone",
                                "nullable": true
                            },
                            "workPhone": {
                                "type": "string",
                                "description": "Work Phone",
                                "nullable": true
                            },
                            "mobilePhone": {
                                "type": "string",
                                "description": "Mobile Phone",
                                "nullable": true
                            },
                            "email": {
                                "type": "string",
                                "description": "Email",
                                "nullable": true
                            },
                            "customFields": {
                                "type": "array",
                                "description": "Custom Fields",
                                "nullable": true,
                                "items": {
                                    "$ref": "#/components/schemas/HrEmployeeCustomFieldViewModel"
                                }
                            },
                            "smoker": {
                                "type": "boolean",
                                "description": "Gets or sets a value indicating whether this HrPersonViewModel is smoker."
                            },
                            "countryOfCitizenship": {
                                "type": "string",
                                "description": "Gets or sets the country of citizenship.",
                                "nullable": true
                            },
                            "priorName": {
                                "type": "string",
                                "description": "Gets or sets the name of the prior.",
                                "nullable": true
                            }
                        }
                    }
                ]
            },
            "Gender": {
                "type": "string",
                "description": "Enum. Specifies the gender type.",
                "x-enumNames": [
                    "Unknown",
                    "Male",
                    "Female",
                    "Other",
                    "NotSet"
                ],
                "enum": [
                    "Unknown",
                    "Male",
                    "Female",
                    "Other",
                    "NotSet"
                ]
            },
            "HrAddressViewModel": {
                "type": "object",
                "description": "HR Address View Model",
                "additionalProperties": false,
                "properties": {
                    "address1": {
                        "type": "string",
                        "description": "Address line 1",
                        "nullable": true
                    },
                    "address2": {
                        "type": "string",
                        "description": "Address line 2",
                        "nullable": true
                    },
                    "address3": {
                        "type": "string",
                        "description": "Gets or sets the address3.",
                        "nullable": true
                    },
                    "city": {
                        "type": "string",
                        "description": "City",
                        "nullable": true
                    },
                    "state": {
                        "type": "string",
                        "description": "State",
                        "nullable": true
                    },
                    "zip": {
                        "type": "string",
                        "description": "Zip",
                        "nullable": true
                    },
                    "nation": {
                        "type": "string",
                        "description": "Nation",
                        "nullable": true
                    },
                    "language": {
                        "type": "integer",
                        "description": "Gets or sets the language.",
                        "format": "int32"
                    }
                }
            },
            "HrEmployeeCustomFieldViewModel": {
                "type": "object",
                "description": "Employee Custom Field View Model",
                "additionalProperties": false,
                "properties": {
                    "uniqueid": {
                        "type": "string",
                        "description": "Custom Field UniqueID",
                        "format": "guid"
                    },
                    "customField": {
                        "description": "Custom fields",
                        "nullable": true,
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/HrCustomFieldViewModel"
                            }
                        ]
                    },
                    "value": {
                        "type": "string",
                        "description": "Field value",
                        "nullable": true
                    },
                    "integerValue": {
                        "type": "integer",
                        "description": "Field integer value",
                        "format": "int32",
                        "nullable": true
                    },
                    "decimalValue": {
                        "type": "number",
                        "description": "Field Decimal value",
                        "format": "decimal",
                        "nullable": true
                    },
                    "dateTimeValue": {
                        "type": "string",
                        "description": "Field DateTime value",
                        "format": "date-time",
                        "nullable": true
                    }
                }
            },
            "HrCustomFieldViewModel": {
                "type": "object",
                "description": "Custom Field View Model",
                "additionalProperties": false,
                "properties": {
                    "uniqueid": {
                        "type": "string",
                        "description": "Custom Field UniqueID",
                        "format": "guid"
                    },
                    "values": {
                        "type": "array",
                        "description": "Custom field value",
                        "nullable": true,
                        "items": {
                            "$ref": "#/components/schemas/HrCustomFieldValueViewModel"
                        }
                    },
                    "label": {
                        "type": "string",
                        "description": "Label",
                        "nullable": true
                    },
                    "description": {
                        "type": "string",
                        "description": "Description",
                        "nullable": true
                    },
                    "deleted": {
                        "type": "boolean",
                        "description": "Deleted"
                    },
                    "customFieldType": {
                        "type": "string",
                        "description": "Gets or sets the type of the custom field.",
                        "nullable": true
                    },
                    "required": {
                        "type": "boolean",
                        "description": "Gets or sets a value indicating whether this HrCustomFieldViewModel is required."
                    },
                    "readOnly": {
                        "type": "boolean",
                        "description": "Gets or sets a value indicating whether [read only]."
                    },
                    "readOnlyAdmin": {
                        "type": "boolean",
                        "description": "Gets or sets a value indicating whether [read only admin]."
                    },
                    "showOnEnrollmentSite": {
                        "type": "boolean",
                        "description": "Gets or sets a value indicating whether [show on enrollment site]."
                    },
                    "informational": {
                        "type": "boolean",
                        "description": "Gets or sets a value indicating whether this HrCustomFieldViewModel is informational."
                    }
                }
            },
            "HrCustomFieldValueViewModel": {
                "type": "object",
                "description": "Custom field Value view model",
                "additionalProperties": false,
                "properties": {
                    "value": {
                        "type": "string",
                        "description": "Gets or sets the value.",
                        "nullable": true
                    },
                    "description": {
                        "type": "string",
                        "description": "Gets or sets the description.",
                        "nullable": true
                    }
                }
            },
            "EmployeeActivityViewModel": {
                "type": "object",
                "description": "Employee Activity View Model",
                "additionalProperties": false,
                "properties": {
                    "status": {
                        "description": "Employee Session Activity Type",
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/EmployeeSessionActivityType"
                            }
                        ]
                    },
                    "lastAccessTime": {
                        "type": "string",
                        "description": "LastAccessTime",
                        "format": "date-time",
                        "nullable": true
                    }
                }
            },
            "EmployeeSessionActivityType": {
                "type": "integer",
                "description": "Employee Session Activity Type",
                "x-enumNames": [
                    "EmployeeInactive",
                    "EmployeeActive",
                    "EmployeeActiveWithChat"
                ],
                "enum": [
                    0,
                    1,
                    2
                ]
            },
            "GetHrCoveragesListResult": {
                "type": "object",
                "description": "Result envelope for querying list of employee coverages.",
                "additionalProperties": false,
                "properties": {
                    "recordsCount": {
                        "type": "integer",
                        "description": "Gets/Sets total records count.",
                        "format": "int32"
                    },
                    "coverages": {
                        "type": "array",
                        "description": "Gets/Sets list of coverages.",
                        "nullable": true,
                        "items": {
                            "$ref": "#/components/schemas/HrCoverageListItemViewModel"
                        }
                    }
                }
            },
            "HrCoverageListItemViewModel": {
                "type": "object",
                "description": "Employee coverage view model for list display.",
                "additionalProperties": false,
                "properties": {
                    "uniqueid": {
                        "type": "string",
                        "description": "Gets or sets unique id.",
                        "format": "guid"
                    },
                    "asOfDate": {
                        "type": "string",
                        "description": "Gets or sets as of date.",
                        "format": "date-time"
                    },
                    "insuredPerson": {
                        "description": "Gets or sets insured person.",
                        "nullable": true,
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/HrPersonListItemViewModel"
                            }
                        ]
                    },
                    "plan": {
                        "description": "Gets or sets plan.",
                        "nullable": true,
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/HrBenefitPlanListItemViewModel"
                            }
                        ]
                    },
                    "product": {
                        "description": "Gets or sets product",
                        "nullable": true,
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/HrBenefitProductListItemViewModel"
                            }
                        ]
                    },
                    "planYear": {
                        "description": "Gets or sets plan year.",
                        "nullable": true,
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/HrPlanYearListItemViewModel"
                            }
                        ]
                    },
                    "policyNumber": {
                        "type": "string",
                        "description": "Gets or sets policy number.",
                        "nullable": true
                    },
                    "policyDate": {
                        "type": "string",
                        "description": "Gets or sets policy date.",
                        "format": "date-time",
                        "nullable": true
                    },
                    "effectiveDate": {
                        "type": "string",
                        "description": "Gets or sets effective date.",
                        "format": "date-time"
                    },
                    "terminationDate": {
                        "type": "string",
                        "description": "Gets or sets termination date.",
                        "format": "date-time",
                        "nullable": true
                    },
                    "coverageType": {
                        "description": "Gets or sets coverage type.",
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/Tier"
                            }
                        ]
                    },
                    "billingDate": {
                        "type": "string",
                        "description": "Gets or sets billing date.",
                        "format": "date-time"
                    },
                    "endBillingDate": {
                        "type": "string",
                        "description": "Gets or sets end billing date.",
                        "format": "date-time",
                        "nullable": true
                    },
                    "benefitAmount": {
                        "type": "number",
                        "description": "Gets or sets benefit amount.",
                        "format": "decimal",
                        "nullable": true
                    },
                    "lumpSum": {
                        "type": "number",
                        "description": "Gets or sets lump sum.",
                        "format": "decimal",
                        "nullable": true
                    },
                    "units": {
                        "type": "number",
                        "description": "Gets or sets units.",
                        "format": "decimal",
                        "nullable": true
                    },
                    "deductionOptionCode": {
                        "type": "string",
                        "description": "Gets or sets deduction option code.",
                        "nullable": true
                    },
                    "section125": {
                        "type": "boolean",
                        "description": "Gets or sets section125 status."
                    },
                    "deductionFrequency": {
                        "description": "Gets or sets deduction frequency.",
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/Frequency"
                            }
                        ]
                    },
                    "employeeCost": {
                        "type": "number",
                        "description": "Gets or sets employee cost.",
                        "format": "decimal"
                    },
                    "employeeAddCost": {
                        "type": "number",
                        "description": "Gets or sets employee additional cost.",
                        "format": "decimal"
                    },
                    "employerCost": {
                        "type": "number",
                        "description": "Gets or sets employer cost.",
                        "format": "decimal"
                    },
                    "uwPending": {
                        "type": "boolean",
                        "description": "Gets or sets underwriting pending flag."
                    },
                    "increaseBenefitAmount": {
                        "type": "number",
                        "description": "Gets or sets increase benefit amount.",
                        "format": "decimal",
                        "nullable": true
                    },
                    "increaseDeductionOptionCode": {
                        "type": "string",
                        "description": "Gets or sets increase deduction option code.",
                        "nullable": true
                    },
                    "increaseEmployeeCost": {
                        "type": "number",
                        "description": "Gets or sets increase employee cost.",
                        "format": "decimal"
                    },
                    "increaseEmployeeAddCost": {
                        "type": "number",
                        "description": "Gets or sets increase employee additional cost.",
                        "format": "decimal"
                    },
                    "increaseEmployerCost": {
                        "type": "number",
                        "description": "Gets or sets increase employer cost.",
                        "format": "decimal"
                    },
                    "increaseEffectiveImmediate": {
                        "type": "boolean",
                        "description": "Gets or sets if increase is effective immediate."
                    }
                }
            },
            "HrPersonListItemViewModel": {
                "type": "object",
                "description": "Person view model for list display.",
                "additionalProperties": false,
                "properties": {
                    "uniqueid": {
                        "type": "string",
                        "description": "Gets or sets uniqueid.",
                        "format": "guid"
                    },
                    "firstName": {
                        "type": "string",
                        "description": "Gets or sets first name.",
                        "nullable": true
                    },
                    "lastName": {
                        "type": "string",
                        "description": "Gets or sets last name.",
                        "nullable": true
                    },
                    "fullName": {
                        "type": "string",
                        "description": "Gets or sets full name.",
                        "nullable": true
                    },
                    "relationship": {
                        "description": "Gets or sets relationshup.",
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/Relationship"
                            }
                        ]
                    },
                    "relationshipDescription": {
                        "description": "Gets or sets relationship description.",
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/LegalStatus"
                            }
                        ]
                    }
                }
            },
            "Relationship": {
                "type": "string",
                "description": "Enum. Type of relationship",
                "x-enumNames": [
                    "Employee",
                    "Spouse",
                    "Child",
                    "Grandchild",
                    "DomesticPartner",
                    "Parent",
                    "Grandparent",
                    "AdultBenefitRecipient",
                    "Beneficiary",
                    "Other",
                    "Any",
                    "Unknown",
                    "ExSpouse",
                    "AdultDependent"
                ],
                "enum": [
                    "Employee",
                    "Spouse",
                    "Child",
                    "Grandchild",
                    "DomesticPartner",
                    "Parent",
                    "Grandparent",
                    "AdultBenefitRecipient",
                    "Beneficiary",
                    "Other",
                    "Any",
                    "Unknown",
                    "ExSpouse",
                    "AdultDependent"
                ]
            },
            "LegalStatus": {
                "type": "string",
                "description": "Enum. Legal status of relationship to applicant.",
                "x-enumNames": [
                    "Employee",
                    "Spouse",
                    "CommonLawSpouse",
                    "Child",
                    "AdoptedChild",
                    "CollateralDependent",
                    "CustodialGrandchild",
                    "FosterChild",
                    "Stepchild",
                    "Ward",
                    "CustodialNieceOrNephew",
                    "DomesticPartnersChild",
                    "ChildOfCivilUnionPartner",
                    "Grandchild",
                    "DomesticPartner",
                    "CivilUnionPartner",
                    "Parent",
                    "Grandparent",
                    "AdultBenefitRecipient",
                    "Other",
                    "Any",
                    "Unknown",
                    "ExSpouse",
                    "AdultDependent",
                    "Beneficiary",
                    "Trust",
                    "AuntOrUncle",
                    "NephewOrNiece",
                    "Sibling",
                    "Cousin",
                    "Charity"
                ],
                "enum": [
                    "Employee",
                    "Spouse",
                    "CommonLawSpouse",
                    "Child",
                    "AdoptedChild",
                    "CollateralDependent",
                    "CustodialGrandchild",
                    "FosterChild",
                    "Stepchild",
                    "Ward",
                    "CustodialNieceOrNephew",
                    "DomesticPartnersChild",
                    "ChildOfCivilUnionPartner",
                    "Grandchild",
                    "DomesticPartner",
                    "CivilUnionPartner",
                    "Parent",
                    "Grandparent",
                    "AdultBenefitRecipient",
                    "Other",
                    "Any",
                    "Unknown",
                    "ExSpouse",
                    "AdultDependent",
                    "Beneficiary",
                    "Trust",
                    "AuntOrUncle",
                    "NephewOrNiece",
                    "Sibling",
                    "Cousin",
                    "Charity"
                ]
            },
            "HrBenefitPlanListItemViewModel": {
                "type": "object",
                "description": "HR benefit plan view model for list display.",
                "additionalProperties": false,
                "properties": {
                    "uniqueid": {
                        "type": "string",
                        "description": "Gets or sets unique id.",
                        "format": "guid"
                    },
                    "name": {
                        "type": "string",
                        "description": "Gets or sets name.",
                        "nullable": true
                    },
                    "type": {
                        "description": "Gets or sets type.",
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/ProductType"
                            }
                        ]
                    }
                }
            },
            "ProductType": {
                "type": "string",
                "description": "Enum. Indicates the product type.",
                "x-enumNames": [
                    "Unknown",
                    "Health",
                    "Dental",
                    "Vision",
                    "PrescriptionDrugs",
                    "HealthSavingsAccount",
                    "HealthCareFSA",
                    "DependentCareFSA",
                    "ShortTermDisability",
                    "LongTermDisability",
                    "BasicTermLifeandADD",
                    "OptionalTermLife",
                    "OptionalADD",
                    "SpouseLife",
                    "ChildLife",
                    "Accident",
                    "CriticalIllness",
                    "Cancer",
                    "UniversalLife",
                    "WholeLife",
                    "Product401k",
                    "Product403b",
                    "ADD",
                    "EAP",
                    "EducationSavings",
                    "HealthReimbursementAccount",
                    "HealthSupplement",
                    "HomeAuto",
                    "Hospitalization",
                    "TermLifeInsurance",
                    "LongTermCare",
                    "Membership",
                    "Parking",
                    "PetInsurance",
                    "RetirementSavings",
                    "Transit",
                    "WellnessPreventiveCare",
                    "Custom",
                    "OneView",
                    "Aflac_SNG",
                    "Aflac_AWES",
                    "Aflac_Both",
                    "AFProductOnly",
                    "AFEnroll",
                    "Harmony",
                    "WashingtonNational",
                    "Everwell",
                    "Other"
                ],
                "enum": [
                    "Unknown",
                    "Health",
                    "Dental",
                    "Vision",
                    "PrescriptionDrugs",
                    "HealthSavingsAccount",
                    "HealthCareFSA",
                    "DependentCareFSA",
                    "ShortTermDisability",
                    "LongTermDisability",
                    "BasicTermLifeandADD",
                    "OptionalTermLife",
                    "OptionalADD",
                    "SpouseLife",
                    "ChildLife",
                    "Accident",
                    "CriticalIllness",
                    "Cancer",
                    "UniversalLife",
                    "WholeLife",
                    "Product401k",
                    "Product403b",
                    "ADD",
                    "EAP",
                    "EducationSavings",
                    "HealthReimbursementAccount",
                    "HealthSupplement",
                    "HomeAuto",
                    "Hospitalization",
                    "TermLifeInsurance",
                    "LongTermCare",
                    "Membership",
                    "Parking",
                    "PetInsurance",
                    "RetirementSavings",
                    "Transit",
                    "WellnessPreventiveCare",
                    "Custom",
                    "OneView",
                    "Aflac_SNG",
                    "Aflac_AWES",
                    "Aflac_Both",
                    "AFProductOnly",
                    "AFEnroll",
                    "Harmony",
                    "WashingtonNational",
                    "Everwell",
                    "Other"
                ]
            },
            "HrBenefitProductListItemViewModel": {
                "type": "object",
                "description": "HR benefit product view model for list display.",
                "additionalProperties": false,
                "properties": {
                    "uniqueid": {
                        "type": "string",
                        "description": "Gets or sets unique id.",
                        "format": "guid"
                    },
                    "name": {
                        "type": "string",
                        "description": "Gets or sets name.",
                        "nullable": true
                    },
                    "shortName": {
                        "type": "string",
                        "description": "Gets or sets short name.",
                        "nullable": true
                    },
                    "type": {
                        "description": "Gets or sets type.",
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/ProductType"
                            }
                        ]
                    }
                }
            },
            "HrPlanYearListItemViewModel": {
                "type": "object",
                "description": "Plan year view model for list display.",
                "additionalProperties": false,
                "properties": {
                    "uniqueid": {
                        "type": "string",
                        "description": "Gets or sets unique id.",
                        "format": "guid",
                        "nullable": true
                    },
                    "planYearStartDate": {
                        "type": "string",
                        "description": "Gets or sets plan year start date.",
                        "format": "date-time"
                    }
                }
            },
            "Tier": {
                "type": "string",
                "description": "Enum. Specifies the coverage tier of the insured.",
                "x-enumNames": [
                    "NoCoverage",
                    "ChildrenOnly",
                    "SpouseOnly",
                    "SpouseChildren",
                    "EmployeeOnly",
                    "EmployeeChildren",
                    "EmployeeSpouse",
                    "Family",
                    "Employee1",
                    "Employee2",
                    "Employee3",
                    "EmployeeChild",
                    "ParentGrandparent",
                    "Employee2Children",
                    "EmployeeSpouseChild",
                    "FamilyDual",
                    "Employee4",
                    "SpouseDual",
                    "ChildGrandchild",
                    "EmployeeSpouse2Children"
                ],
                "enum": [
                    "NoCoverage",
                    "ChildrenOnly",
                    "SpouseOnly",
                    "SpouseChildren",
                    "EmployeeOnly",
                    "EmployeeChildren",
                    "EmployeeSpouse",
                    "Family",
                    "Employee1",
                    "Employee2",
                    "Employee3",
                    "EmployeeChild",
                    "ParentGrandparent",
                    "Employee2Children",
                    "EmployeeSpouseChild",
                    "FamilyDual",
                    "Employee4",
                    "SpouseDual",
                    "ChildGrandchild",
                    "EmployeeSpouse2Children"
                ]
            },
            "Frequency": {
                "type": "string",
                "description": "Enum. Specifies the number of times per year the premium is paid.",
                "x-enumNames": [
                    "Unknown",
                    "Yearly",
                    "SemiAnnual",
                    "PerYear_3",
                    "Quarterly",
                    "PerYear_5",
                    "PerYear_6",
                    "PerYear_7",
                    "PerYear_8",
                    "PerYear_9",
                    "PerYear_10",
                    "PerYear_11",
                    "Monthly",
                    "PerYear_13",
                    "PerYear_14",
                    "PerYear_15",
                    "PerYear_16",
                    "PerYear_17",
                    "PerYear_18",
                    "PerYear_19",
                    "PerYear_20",
                    "PerYear_21",
                    "PerYear_22",
                    "PerYear_23",
                    "SemiMonthly",
                    "PerYear_25",
                    "BiWeekly",
                    "PerYear_27",
                    "PerYear_28",
                    "PerYear_29",
                    "PerYear_30",
                    "PerYear_31",
                    "PerYear_32",
                    "PerYear_33",
                    "PerYear_34",
                    "PerYear_35",
                    "PerYear_36",
                    "PerYear_37",
                    "PerYear_38",
                    "PerYear_39",
                    "PerYear_40",
                    "PerYear_41",
                    "PerYear_42",
                    "PerYear_43",
                    "PerYear_44",
                    "PerYear_45",
                    "PerYear_46",
                    "PerYear_47",
                    "PerYear_48",
                    "PerYear_49",
                    "PerYear_50",
                    "PerYear_51",
                    "Weekly",
                    "PerYear_53",
                    "PerYear_60",
                    "PerYear_260"
                ],
                "enum": [
                    "Unknown",
                    "Yearly",
                    "SemiAnnual",
                    "PerYear_3",
                    "Quarterly",
                    "PerYear_5",
                    "PerYear_6",
                    "PerYear_7",
                    "PerYear_8",
                    "PerYear_9",
                    "PerYear_10",
                    "PerYear_11",
                    "Monthly",
                    "PerYear_13",
                    "PerYear_14",
                    "PerYear_15",
                    "PerYear_16",
                    "PerYear_17",
                    "PerYear_18",
                    "PerYear_19",
                    "PerYear_20",
                    "PerYear_21",
                    "PerYear_22",
                    "PerYear_23",
                    "SemiMonthly",
                    "PerYear_25",
                    "BiWeekly",
                    "PerYear_27",
                    "PerYear_28",
                    "PerYear_29",
                    "PerYear_30",
                    "PerYear_31",
                    "PerYear_32",
                    "PerYear_33",
                    "PerYear_34",
                    "PerYear_35",
                    "PerYear_36",
                    "PerYear_37",
                    "PerYear_38",
                    "PerYear_39",
                    "PerYear_40",
                    "PerYear_41",
                    "PerYear_42",
                    "PerYear_43",
                    "PerYear_44",
                    "PerYear_45",
                    "PerYear_46",
                    "PerYear_47",
                    "PerYear_48",
                    "PerYear_49",
                    "PerYear_50",
                    "PerYear_51",
                    "Weekly",
                    "PerYear_53",
                    "PerYear_60",
                    "PerYear_260"
                ]
            },
            "HrCoverageViewModel": {
                "type": "object",
                "description": "Employee coverage view model.",
                "additionalProperties": false,
                "properties": {
                    "uniqueid": {
                        "type": "string",
                        "description": "Gets or sets unique id.",
                        "format": "guid"
                    },
                    "asOfDate": {
                        "type": "string",
                        "description": "Gets or sets as of date.",
                        "format": "date-time"
                    },
                    "insuredPerson": {
                        "description": "Gets or sets insured person.",
                        "nullable": true,
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/HrPersonListItemViewModel"
                            }
                        ]
                    },
                    "plan": {
                        "description": "Gets or sets plan.",
                        "nullable": true,
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/HrBenefitPlanListItemViewModel"
                            }
                        ]
                    },
                    "product": {
                        "description": "Gets or sets product.",
                        "nullable": true,
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/HrBenefitProductListItemViewModel"
                            }
                        ]
                    },
                    "planYear": {
                        "description": "Gets or sets plan year.",
                        "nullable": true,
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/HrPlanYearListItemViewModel"
                            }
                        ]
                    },
                    "previousCoverage": {
                        "description": "Gets or sets previous coverage.",
                        "nullable": true,
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/HrCoverageListItemViewModel"
                            }
                        ]
                    },
                    "planYearStartDate": {
                        "type": "string",
                        "description": "Gets or sets plan year start date.",
                        "format": "date-time",
                        "nullable": true
                    },
                    "policyNumber": {
                        "type": "string",
                        "description": "Gets or sets policy number.",
                        "nullable": true
                    },
                    "policyDate": {
                        "type": "string",
                        "description": "Gets or sets policy date.",
                        "format": "date-time",
                        "nullable": true
                    },
                    "initialEffectiveDate": {
                        "type": "string",
                        "description": "Gets or sets initial effective date.",
                        "format": "date-time"
                    },
                    "effectiveDate": {
                        "type": "string",
                        "description": "Gets or sets effective date.",
                        "format": "date-time"
                    },
                    "terminationDate": {
                        "type": "string",
                        "description": "Gets or sets termination date.",
                        "format": "date-time",
                        "nullable": true
                    },
                    "coverageType": {
                        "description": "Gets or sets coverage type.",
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/Tier"
                            }
                        ]
                    },
                    "billingDate": {
                        "type": "string",
                        "description": "Gets or sets billing date.",
                        "format": "date-time"
                    },
                    "endBillingDate": {
                        "type": "string",
                        "description": "Gets or sets end billing date.",
                        "format": "date-time",
                        "nullable": true
                    },
                    "benefitAmountFrequency": {
                        "description": "Gets or sets benefit amount frequency.",
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/Frequency"
                            }
                        ]
                    },
                    "benefitAmount": {
                        "type": "number",
                        "description": "Gets or sets benefit amount.",
                        "format": "decimal"
                    },
                    "lumpSum": {
                        "type": "number",
                        "description": "Gets or sets lump sum.",
                        "format": "decimal",
                        "nullable": true
                    },
                    "units": {
                        "type": "number",
                        "description": "Gets or sets units.",
                        "format": "decimal"
                    },
                    "imputedIncome": {
                        "type": "number",
                        "description": "Gets or sets imputed income.",
                        "format": "decimal",
                        "nullable": true
                    },
                    "deductionOptionCode": {
                        "type": "string",
                        "description": "Gets or sets deduction option code.",
                        "nullable": true
                    },
                    "faceAmount": {
                        "type": "number",
                        "description": "Gets or sets face amount.",
                        "format": "decimal",
                        "nullable": true
                    },
                    "faceDeductionOptionCode": {
                        "type": "string",
                        "description": "Gets or sets face deduction option code.",
                        "nullable": true
                    },
                    "section125": {
                        "type": "boolean",
                        "description": "Gets or sets section125 status."
                    },
                    "deductionFrequency": {
                        "description": "Gets or sets deduction frequency.",
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/Frequency2"
                            }
                        ]
                    },
                    "rateCardCost": {
                        "type": "number",
                        "description": "Gets or sets employee rate card cost.",
                        "format": "decimal",
                        "nullable": true
                    },
                    "baseRateCardCost": {
                        "type": "number",
                        "description": "Gets or sets employee base rate card cost.",
                        "format": "decimal",
                        "nullable": true
                    },
                    "employeeCost": {
                        "type": "number",
                        "description": "Gets or sets employee cost.",
                        "format": "decimal"
                    },
                    "employeeAddCost": {
                        "type": "number",
                        "description": "Gets or sets employee additional cost.",
                        "format": "decimal"
                    },
                    "employeeFee": {
                        "type": "number",
                        "description": "Gets or sets employee fee.",
                        "format": "decimal"
                    },
                    "employerRateCardCost": {
                        "type": "number",
                        "description": "Gets or sets employer rate card cost.",
                        "format": "decimal",
                        "nullable": true
                    },
                    "employerCost": {
                        "type": "number",
                        "description": "Gets or sets employer cost.",
                        "format": "decimal"
                    },
                    "employerFee": {
                        "type": "number",
                        "description": "Gets or sets employer fee.",
                        "format": "decimal"
                    },
                    "uwPending": {
                        "type": "boolean",
                        "description": "Gets or sets underwriting pending flag."
                    },
                    "increaseBenefitAmount": {
                        "type": "number",
                        "description": "Gets or sets increase benefit amount.",
                        "format": "decimal",
                        "nullable": true
                    },
                    "increaseDeductionOptionCode": {
                        "type": "string",
                        "description": "Gets or sets increase deduction option code.",
                        "nullable": true
                    },
                    "increaseFaceAmount": {
                        "type": "number",
                        "description": "Gets or sets increase face amount.",
                        "format": "decimal",
                        "nullable": true
                    },
                    "increaseFaceDeductionOptionCode": {
                        "type": "string",
                        "description": "Gets or sets increase face deduction option code.",
                        "nullable": true
                    },
                    "increaseRateCardCost": {
                        "type": "number",
                        "description": "Gets or sets increase employee rate card cost.",
                        "format": "decimal",
                        "nullable": true
                    },
                    "increaseBaseRateCardCost": {
                        "type": "number",
                        "description": "Gets or sets increase employee base rate card cost.",
                        "format": "decimal",
                        "nullable": true
                    },
                    "increaseEmployeeCost": {
                        "type": "number",
                        "description": "Gets or sets increase employee cost.",
                        "format": "decimal"
                    },
                    "increaseEmployeeAddCost": {
                        "type": "number",
                        "description": "Gets or sets increase employee additional cost.",
                        "format": "decimal"
                    },
                    "increaseEmployerRateCardCost": {
                        "type": "number",
                        "description": "Gets or sets increase employer rate card cost.",
                        "format": "decimal",
                        "nullable": true
                    },
                    "increaseEmployerCost": {
                        "type": "number",
                        "description": "Gets or sets increase employer cost.",
                        "format": "decimal"
                    },
                    "increaseEffectiveImmediate": {
                        "type": "boolean",
                        "description": "Gets or sets if increase is effective immediate."
                    },
                    "minimumEssentialCoverage": {
                        "type": "boolean",
                        "description": "Gets or sets if has minimum essential coverage.",
                        "nullable": true
                    },
                    "minimumValueCoverage": {
                        "type": "boolean",
                        "description": "Gets or sets if has minimum value coverage.",
                        "nullable": true
                    },
                    "meetsACAQualification": {
                        "type": "boolean",
                        "description": "Gets or sets whether elected product meets ACA qualification.",
                        "nullable": true
                    },
                    "verified": {
                        "type": "boolean",
                        "description": "Gets or sets if coverage is verified."
                    },
                    "locked": {
                        "type": "boolean",
                        "description": "Gets or sets if coverage is locked."
                    },
                    "lockedReason": {
                        "type": "string",
                        "description": "Gets or sets reason why coverage is locked.",
                        "nullable": true
                    },
                    "coveragePersons": {
                        "type": "array",
                        "description": "Gets or sets list of coverage persons.",
                        "nullable": true,
                        "items": {
                            "$ref": "#/components/schemas/HrCoveragePersonViewModel"
                        }
                    },
                    "riders": {
                        "type": "array",
                        "description": "Gets or sets list of riders.",
                        "nullable": true,
                        "items": {
                            "$ref": "#/components/schemas/HrCoverageRiderViewModel"
                        }
                    },
                    "beneficiaries": {
                        "type": "array",
                        "description": "Gets or sets list of beneficiaries.",
                        "nullable": true,
                        "items": {
                            "$ref": "#/components/schemas/HrBeneficiaryViewModel"
                        }
                    },
                    "customFields": {
                        "type": "array",
                        "description": "Gets or sets list of custom fields.",
                        "nullable": true,
                        "items": {
                            "$ref": "#/components/schemas/HrCoverageCustomFieldViewModel"
                        }
                    },
                    "events": {
                        "type": "array",
                        "description": "Gets or sets list of coverage events.",
                        "nullable": true,
                        "items": {
                            "$ref": "#/components/schemas/HrCoverageEventViewModel"
                        }
                    }
                }
            },
            "Frequency2": {
                "type": "integer",
                "description": "Enum. Specifies the number of times per year the premium is paid.",
                "x-enumNames": [
                    "Unknown",
                    "Yearly",
                    "SemiAnnual",
                    "PerYear_3",
                    "Quarterly",
                    "PerYear_5",
                    "PerYear_6",
                    "PerYear_7",
                    "PerYear_8",
                    "PerYear_9",
                    "PerYear_10",
                    "PerYear_11",
                    "Monthly",
                    "PerYear_13",
                    "PerYear_14",
                    "PerYear_15",
                    "PerYear_16",
                    "PerYear_17",
                    "PerYear_18",
                    "PerYear_19",
                    "PerYear_20",
                    "PerYear_21",
                    "PerYear_22",
                    "PerYear_23",
                    "SemiMonthly",
                    "PerYear_25",
                    "BiWeekly",
                    "PerYear_27",
                    "PerYear_28",
                    "PerYear_29",
                    "PerYear_30",
                    "PerYear_31",
                    "PerYear_32",
                    "PerYear_33",
                    "PerYear_34",
                    "PerYear_35",
                    "PerYear_36",
                    "PerYear_37",
                    "PerYear_38",
                    "PerYear_39",
                    "PerYear_40",
                    "PerYear_41",
                    "PerYear_42",
                    "PerYear_43",
                    "PerYear_44",
                    "PerYear_45",
                    "PerYear_46",
                    "PerYear_47",
                    "PerYear_48",
                    "PerYear_49",
                    "PerYear_50",
                    "PerYear_51",
                    "Weekly",
                    "PerYear_53",
                    "PerYear_60",
                    "PerYear_260"
                ],
                "enum": [
                    0,
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    13,
                    14,
                    15,
                    16,
                    17,
                    18,
                    19,
                    20,
                    21,
                    22,
                    23,
                    24,
                    25,
                    26,
                    27,
                    28,
                    29,
                    30,
                    31,
                    32,
                    33,
                    34,
                    35,
                    36,
                    37,
                    38,
                    39,
                    40,
                    41,
                    42,
                    43,
                    44,
                    45,
                    46,
                    47,
                    48,
                    49,
                    50,
                    51,
                    52,
                    53,
                    60,
                    260
                ]
            },
            "HrCoveragePersonViewModel": {
                "type": "object",
                "description": "HR coverage person view model.",
                "additionalProperties": false,
                "properties": {
                    "person": {
                        "description": "Gets or sets person.",
                        "nullable": true,
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/HrPersonListItemViewModel"
                            }
                        ]
                    },
                    "memberNumber": {
                        "type": "string",
                        "description": "Gets or sets member number.",
                        "nullable": true
                    },
                    "pcpNumber": {
                        "type": "string",
                        "description": "Gets or sets PCP number.",
                        "nullable": true
                    },
                    "PCPName": {
                        "type": "string",
                        "description": "Gets or sets PCP name.",
                        "nullable": true
                    },
                    "pcpExistingCustomer": {
                        "type": "boolean",
                        "description": "Gets or sets a value indicating whether [PCP existing customer]."
                    },
                    "otherInsurance": {
                        "type": "string",
                        "description": "Gets or sets other insurance information.",
                        "nullable": true
                    }
                }
            },
            "HrCoverageRiderViewModel": {
                "type": "object",
                "description": "HR coverage rider view model.",
                "additionalProperties": false,
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Gets or sets name.",
                        "nullable": true
                    },
                    "description": {
                        "type": "string",
                        "description": "Gets or sets description.",
                        "nullable": true
                    },
                    "isFeature": {
                        "type": "boolean",
                        "description": "Gets or sets if rider is feature parameter value."
                    },
                    "coverageType": {
                        "description": "Gets or sets coverage type.",
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/Tier"
                            }
                        ]
                    },
                    "deductionOptionCode": {
                        "type": "string",
                        "description": "Gets or sets deduction option code.",
                        "nullable": true
                    },
                    "benefitAmount": {
                        "type": "number",
                        "description": "Gets or sets benefit amount.",
                        "format": "decimal"
                    },
                    "units": {
                        "type": "number",
                        "description": "Gets or sets units.",
                        "format": "decimal"
                    },
                    "employeeCost": {
                        "type": "number",
                        "description": "Gets or sets employee cost.",
                        "format": "decimal"
                    },
                    "employeeAddCost": {
                        "type": "number",
                        "description": "Gets or sets employee additional cost.",
                        "format": "decimal"
                    },
                    "employerCost": {
                        "type": "number",
                        "description": "Gets or sets employer cost.",
                        "format": "decimal"
                    },
                    "rateCardCost": {
                        "type": "number",
                        "description": "Gets or sets rate card cost.",
                        "format": "decimal",
                        "nullable": true
                    }
                }
            },
            "HrBeneficiaryViewModel": {
                "type": "object",
                "description": "HR beneficiary view model.",
                "additionalProperties": false,
                "properties": {
                    "type": {
                        "type": "string",
                        "description": "Gets or sets type.",
                        "nullable": true
                    },
                    "percent": {
                        "type": "number",
                        "description": "Gets or sets percent.",
                        "format": "decimal"
                    },
                    "person": {
                        "description": "Gets or sets person.",
                        "nullable": true,
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/HrPersonListItemViewModel"
                            }
                        ]
                    },
                    "personAddress": {
                        "description": "Gets or sets person's address.",
                        "nullable": true,
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/HrAddressViewModel"
                            }
                        ]
                    },
                    "relationship": {
                        "type": "string",
                        "description": "Gets or sets relationship.",
                        "nullable": true
                    },
                    "address": {
                        "type": "string",
                        "description": "Gets or sets address.",
                        "nullable": true
                    },
                    "phone": {
                        "type": "string",
                        "description": "Gets or sets phone.",
                        "nullable": true
                    },
                    "age": {
                        "type": "integer",
                        "description": "Gets or sets age.",
                        "format": "int32"
                    },
                    "ssn": {
                        "type": "string",
                        "description": "Gets or sets ssn.",
                        "nullable": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Gets or sets name.",
                        "nullable": true
                    },
                    "firstName": {
                        "type": "string",
                        "description": "Gets or sets first name.",
                        "nullable": true
                    },
                    "middleInit": {
                        "type": "string",
                        "description": "Gets or sets middle initial.",
                        "nullable": true
                    },
                    "lastName": {
                        "type": "string",
                        "description": "Gets or sets last name.",
                        "nullable": true
                    },
                    "suffix": {
                        "type": "string",
                        "description": "Gets or sets last name.",
                        "nullable": true
                    },
                    "countryOfCitizenship": {
                        "type": "string",
                        "description": "Gets or sets country of citizenship.",
                        "nullable": true
                    },
                    "dob": {
                        "type": "string",
                        "description": "Gets or sets date of birth.",
                        "format": "date-time",
                        "nullable": true
                    },
                    "sex": {
                        "description": "Gets or sets sex.",
                        "nullable": true,
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/Gender"
                            }
                        ]
                    },
                    "beneficiaryNumber": {
                        "type": "string",
                        "description": "Gets or sets beneficiary number.",
                        "nullable": true
                    },
                    "comment": {
                        "type": "string",
                        "description": "Gets or sets comment.",
                        "nullable": true
                    }
                }
            },
            "HrCoverageCustomFieldViewModel": {
                "type": "object",
                "description": "HR coverage custom field view model.",
                "additionalProperties": false,
                "properties": {
                    "uniqueid": {
                        "type": "string",
                        "description": "Custom Field UniqueID",
                        "format": "guid"
                    },
                    "customField": {
                        "description": "Custom fields",
                        "nullable": true,
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/HrCustomFieldViewModel"
                            }
                        ]
                    },
                    "value": {
                        "type": "string",
                        "description": "Field value",
                        "nullable": true
                    },
                    "integerValue": {
                        "type": "integer",
                        "description": "Field integer value",
                        "format": "int32",
                        "nullable": true
                    },
                    "decimalValue": {
                        "type": "number",
                        "description": "Field Decimal value",
                        "format": "decimal",
                        "nullable": true
                    },
                    "dateTimeValue": {
                        "type": "string",
                        "description": "Field DateTime value",
                        "format": "date-time",
                        "nullable": true
                    }
                }
            },
            "HrCoverageEventViewModel": {
                "type": "object",
                "description": "HR coverage event view model.",
                "additionalProperties": false,
                "properties": {
                    "type": {
                        "type": "string",
                        "description": "Gets or sets type.",
                        "nullable": true
                    },
                    "date": {
                        "type": "string",
                        "description": "Gets or sets date.",
                        "format": "date-time"
                    },
                    "processingTime": {
                        "type": "string",
                        "description": "Gets or sets processing time.",
                        "format": "date-time"
                    },
                    "reasonType": {
                        "type": "integer",
                        "description": "Gets or sets reason type.",
                        "format": "int32"
                    },
                    "reason": {
                        "type": "string",
                        "description": "Gets or sets reason.",
                        "nullable": true
                    },
                    "enrollerUser": {
                        "description": "Gets or sets enroller user.",
                        "nullable": true,
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/HrUserListItemViewModel"
                            }
                        ]
                    },
                    "application": {
                        "description": "Gets or sets application.",
                        "nullable": true,
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/HrApplicationListItemViewModel"
                            }
                        ]
                    }
                }
            },
            "HrUserListItemViewModel": {
                "type": "object",
                "description": "HR user view model for list display.",
                "additionalProperties": false,
                "properties": {
                    "uniqueid": {
                        "type": "string",
                        "description": "Gets or sets unique id.",
                        "format": "guid"
                    },
                    "fullName": {
                        "type": "string",
                        "description": "Gets or sets full name.",
                        "nullable": true
                    }
                }
            },
            "HrApplicationListItemViewModel": {
                "type": "object",
                "description": "HR application view model for list display.",
                "additionalProperties": false,
                "properties": {
                    "uniqueid": {
                        "type": "string",
                        "description": "Gets or sets unique id.",
                        "format": "guid"
                    }
                }
            },
            "SetupBaseViewModel": {
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Name",
                        "example": "Test name"
                    },
                    "uniqueid": {
                        "type": "string",
                        "description": "Unique Id",
                        "format": "guid",
                        "nullable": true,
                        "example": "07677a1c-9bd9-40ff-9469-840850eca6f0"
                    }
                }
            },
            "CaseListItemViewModel": {
                "type": "object",
                "description": "Case list item view model.",
                "additionalProperties": false,
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Case name",
                        "example": "Test case"
                    },
                    "uniqueid": {
                        "type": "string",
                        "description": "Case Unique Id",
                        "format": "guid",
                        "nullable": true,
                        "example": "07677a1c-9bd9-40ff-9469-840850eca6f0"
                    }
                }
            },
            "EmployerListItemViewModel": {
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Employer name",
                        "example": "Test Employer"
                    },
                    "uniqueid": {
                        "type": "string",
                        "description": "Employer Unique Id",
                        "format": "guid",
                        "nullable": true,
                        "example": "07677a1c-9bd9-40ff-9469-840850eca6f0"
                    }
                }
            },
            "BrokerageListItemViewModel": {
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Broker name",
                        "example": "Test broker"
                    },
                    "uniqueid": {
                        "type": "string",
                        "description": "Broker Unique Id",
                        "format": "guid",
                        "nullable": true,
                        "example": "07677a1c-9bd9-40ff-9469-840850eca6f0"
                    }
                }
            },
            "UserListItemViewModel": {
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "User full name",
                        "example": "John Doe"
                    },
                    "uniqueid": {
                        "type": "string",
                        "description": "User Unique Id",
                        "format": "guid",
                        "nullable": true,
                        "example": "07677a1c-9bd9-40ff-9469-840850eca6f0"
                    }
                }
            },
            "SetupCaseViewModel": {
                "required": [
                    "employer",
                    "brokerage",
                    "defaultEnroller",
                    "signAsDefaultEnroller",
                    "type",
                    "enrollmentLocation",
                    "locked"
                ],
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Case name",
                        "example": "Test Case"
                    },
                    "uniqueid": {
                        "type": "string",
                        "description": "Case Unique Id",
                        "format": "guid",
                        "nullable": true,
                        "example": "07677a1c-9bd9-40ff-9469-840850eca6f0"
                    },
                    "employer": {
                        "$ref": "#/components/schemas/EmployerListItemViewModel"
                    },
                    "brokerage": {
                        "$ref": "#/components/schemas/BrokerageListItemViewModel"
                    },
                    "defaultEnroller": {
                        "$ref": "#/components/schemas/UserListItemViewModel"
                    },
                    "signAsDefaultEnroller": {
                        "type": "boolean",
                        "description": "Sign As Default Enroller",
                        "example": true
                    },
                    "type": {
                        "type": "string",
                        "enum": [
                            "Production",
                            "Training",
                            "Demo",
                            "Test",
                            "Archive"
                        ],
                        "description": "Case Type",
                        "example": "Demo"
                    },
                    "enrollmentLocation": {
                        "type": "string",
                        "enum": [
                            "WorksiteLocation",
                            "Residence"
                        ],
                        "description": "Enrollment location",
                        "example": "Residence"
                    },
                    "locked": {
                        "type": "boolean",
                        "description": "Is case locked",
                        "example": true
                    },
                    "casePublished": {
                        "type": "boolean",
                        "nullable": true,
                        "description": "Is case published",
                        "example": true
                    },
                    "expirationDate": {
                        "type": "string",
                        "format": "date-time",
                        "nullable": true,
                        "description": "Case expiration date",
                        "example": "2019-09-13T15:09:59.18"
                    },
                    "startEnrollment": {
                        "type": "string",
                        "format": "date-time",
                        "nullable": true,
                        "description": "Start open enrollment date",
                        "example": "2019-09-13T15:09:59.18"
                    },
                    "endEnrollment": {
                        "type": "string",
                        "format": "date-time",
                        "nullable": true,
                        "description": "End open enrollment date",
                        "example": "2019-09-13T15:09:59.18"
                    },
                    "planYearStartDate": {
                        "type": "string",
                        "format": "date-time",
                        "nullable": true,
                        "description": "Plan year start date",
                        "example": "2019-09-13T15:09:59.18"
                    }
                }
            },
            "GetCasesListSearchResult": {
                "type": "object",
                "required": [
                    "recordsCount",
                    "cases"
                ],
                "properties": {
                    "recordsCount": {
                        "type": "integer",
                        "description": "Total records count",
                        "example": 123
                    },
                    "cases": {
                        "type": "array",
                        "description": "List of Cases",
                        "items": {
                            "$ref": "#/components/schemas/CaseListItemViewModel"
                        }
                    }
                }
            },
            "SetupBrokerageViewModel": {
                "required": [
                    "contact"
                ],
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Brokerage name",
                        "example": "Test Brokerage"
                    },
                    "uniqueid": {
                        "type": "string",
                        "description": "Brokerage Unique Id",
                        "format": "guid",
                        "nullable": true,
                        "example": "07677a1c-9bd9-40ff-9469-840850eca6f0"
                    },
                    "contact": {
                        "$ref": "#/components/schemas/ContactViewModel"
                    }
                }
            },
            "SetupEmployerViewModel": {
                "required": [
                    "contact"
                ],
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Employer name",
                        "example": "Test Employer"
                    },
                    "uniqueid": {
                        "type": "string",
                        "description": "Employer Unique Id",
                        "format": "guid",
                        "nullable": true,
                        "example": "07677a1c-9bd9-40ff-9469-840850eca6f0"
                    },
                    "ein": {
                        "type": "string",
                        "description": "Employer EIN"
                    },
                    "naics": {
                        "type": "string",
                        "description": "Employer naics"
                    },
                    "contact": {
                        "$ref": "#/components/schemas/ContactViewModel"
                    }
                }
            },
            "ContactViewModel": {
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Name",
                        "example": "Test name"
                    },
                    "companyName": {
                        "type": "string",
                        "description": "Company Name",
                        "example": "Test company"
                    },
                    "phone1": {
                        "type": "string",
                        "description": "phone1",
                        "example": 5551234567
                    },
                    "phone2": {
                        "type": "string",
                        "description": "phone2",
                        "example": 556
                    },
                    "address1": {
                        "type": "string",
                        "description": "Address1",
                        "example": "25 Test str."
                    },
                    "address2": {
                        "type": "string",
                        "description": "Address2",
                        "example": "Suite 300"
                    },
                    "city": {
                        "type": "string",
                        "description": "City",
                        "example": "Dallas"
                    },
                    "state": {
                        "type": "string",
                        "description": "State",
                        "maxLength": 2,
                        "example": "TX"
                    },
                    "zip": {
                        "type": "string",
                        "description": "ZIP",
                        "example": 75107
                    },
                    "nation": {
                        "type": "string",
                        "description": "Nation",
                        "example": "USA"
                    }
                }
            },
            "GetBrokeragesListSearchResult": {
                "type": "object",
                "required": [
                    "recordsCount",
                    "brokerages"
                ],
                "properties": {
                    "recordsCount": {
                        "type": "integer",
                        "description": "Total records count",
                        "example": 123
                    },
                    "brokerages": {
                        "type": "array",
                        "description": "List of brokerages",
                        "items": {
                            "$ref": "#/components/schemas/BrokerageListItemViewModel"
                        }
                    }
                }
            },
            "CasePlanYearViewModel": {
                "type": "object",
                "required": [
                    "startEnrollment",
                    "endOpenEnrollment",
                    "planYearStartDate",
                    "enabled"
                ],
                "properties": {
                    "uniqueid": {
                        "type": "string",
                        "format": "guid",
                        "nullable": true,
                        "description": "Plan year id",
                        "example": "07677a1c-9bd9-40ff-9469-840850eca6f0"
                    },
                    "startEnrollment": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Start enrollment date",
                        "example": "2019-09-13T15:09:59.18"
                    },
                    "endOpenEnrollment": {
                        "type": "string",
                        "format": "date-time",
                        "description": "End enrollment date",
                        "example": "2019-09-13T15:09:59.18"
                    },
                    "planYearStartDate": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Plan year start date",
                        "example": "2019-09-13T15:09:59.18"
                    },
                    "enabled": {
                        "type": "boolean",
                        "example": true
                    }
                }
            },
            "GetPlanYearsListSearchResult": {
                "type": "object",
                "required": [
                    "recordsCount",
                    "planYears"
                ],
                "properties": {
                    "recordsCount": {
                        "type": "integer",
                        "description": "Total records count",
                        "example": 123
                    },
                    "planYears": {
                        "type": "array",
                        "description": "List of plan years",
                        "items": {
                            "$ref": "#/components/schemas/CasePlanYearViewModel"
                        }
                    }
                }
            },
            "GetEmployerListSearchResult": {
                "type": "object",
                "required": [
                    "recordsCount",
                    "employers"
                ],
                "properties": {
                    "recordsCount": {
                        "type": "integer",
                        "description": "Total records count",
                        "example": 123
                    },
                    "employers": {
                        "type": "array",
                        "description": "List of employers",
                        "items": {
                            "$ref": "#/components/schemas/EmployerListItemViewModel"
                        }
                    }
                }
            },
            "SetupPlanViewModel": {
                "required": [
                    "name",
                    "xmlTagName",
                    "type",
                    "engineType",
                    "planSeqNum",
                    "coreBenefit",
                    "cobraEnabled",
                    "hasPrivateInfo"
                ],
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Plan name",
                        "example": "Test plan"
                    },
                    "uniqueid": {
                        "type": "string",
                        "description": "Plan Unique Id",
                        "format": "guid",
                        "nullable": true,
                        "example": "07677a1c-9bd9-40ff-9469-840850eca6f0"
                    },
                    "xmlTagName": {
                        "type": "string",
                        "description": "Plan xml tag name"
                    },
                    "type": {
                        "type": "string",
                        "enum": [
                            "Unknown",
                            "Health",
                            "Dental",
                            "Vision",
                            "PrescriptionDrugs",
                            "HealthSavingsAccount",
                            "HealthCareFSA",
                            "DependentCareFSA",
                            "ShortTermDisability",
                            "LongTermDisability",
                            "BasicTermLifeandADD",
                            "OptionalTermLife",
                            "OptionalADD",
                            "SpouseLife",
                            "ChildLife",
                            "Accident",
                            "CriticalIllness",
                            "Cancer",
                            "UniversalLife",
                            "WholeLife",
                            "Product401k",
                            "Product403b",
                            "ADD",
                            "EAP",
                            "EducationSavings",
                            "HealthReimbursementAccount",
                            "HealthSupplement",
                            "HomeAuto",
                            "Hospitalization",
                            "TermLifeInsurance",
                            "LongTermCare",
                            "Membership",
                            "Parking",
                            "PetInsurance",
                            "RetirementSavings",
                            "Transit",
                            "WellnessPreventiveCare",
                            "Custom",
                            "OneView",
                            "Aflac_SNG",
                            "Aflac_AWES",
                            "Aflac_Both",
                            "AFProductOnly",
                            "AFEnroll",
                            "Harmony",
                            "WashingtonNational",
                            "Everwell",
                            "Other"
                        ],
                        "description": "Plan type",
                        "example": "Health"
                    },
                    "engineType": {
                        "type": "string",
                        "enum": [
                            "Unknown",
                            "NT",
                            "MembershipPlan",
                            "TSA",
                            "SB1",
                            "DB1",
                            "FSA",
                            "Dummy",
                            "DBN",
                            "SmartApp",
                            "CORE",
                            "UNUM",
                            "PTO",
                            "UL",
                            "Flex",
                            "CI",
                            "AllApp",
                            "TexasLife",
                            "OneView",
                            "AFProduct",
                            "INGLink",
                            "AFEnroll",
                            "HarmonyConnect",
                            "BostonMutualBridge",
                            "BenefitFocus",
                            "WashingtonNational",
                            "Everwell",
                            "SecurityMutual",
                            "Allstate",
                            "Other"
                        ],
                        "description": "Engine type",
                        "example": "TexasLife"
                    },
                    "planSeqNum": {
                        "type": "integer",
                        "description": "Sequense number",
                        "example": 12
                    },
                    "coreBenefit": {
                        "type": "boolean",
                        "description": "Core Benefit",
                        "example": true
                    },
                    "cobraEnabled": {
                        "type": "boolean",
                        "description": "Cobra enabled",
                        "example": true
                    },
                    "hasPrivateInfo": {
                        "type": "boolean",
                        "description": "Has private info",
                        "example": true
                    }
                }
            },
            "GetPlansListSearchResult": {
                "type": "object",
                "required": [
                    "recordsCount",
                    "plans"
                ],
                "properties": {
                    "recordsCount": {
                        "type": "integer",
                        "description": "Total records count",
                        "example": 123
                    },
                    "employers": {
                        "type": "array",
                        "description": "List of plans",
                        "items": {
                            "$ref": "#/components/schemas/PlanListItemViewModel"
                        }
                    }
                }
            },
            "PlanListItemViewModel": {
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Plan name",
                        "example": "Test Plan"
                    },
                    "uniqueid": {
                        "type": "string",
                        "description": "Plan Unique Id",
                        "format": "guid",
                        "nullable": true,
                        "example": "07677a1c-9bd9-40ff-9469-840850eca6f0"
                    }
                }
            },
            "GetLocationsListSearchResult": {
                "type": "object",
                "required": [
                    "recordsCount",
                    "locations"
                ],
                "properties": {
                    "recordsCount": {
                        "type": "integer",
                        "description": "Total records count",
                        "example": 123
                    },
                    "locations": {
                        "type": "array",
                        "description": "List of locations",
                        "items": {
                            "$ref": "#/components/schemas/LocationListItemViewModel"
                        }
                    }
                }
            },
            "LocationListItemViewModel": {
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Location name",
                        "example": "Test Location"
                    },
                    "code": {
                        "type": "string",
                        "description": "Location short name",
                        "example": "Test"
                    },
                    "uniqueid": {
                        "type": "string",
                        "description": "Location Unique Id",
                        "format": "guid",
                        "nullable": true,
                        "example": "07677a1c-9bd9-40ff-9469-840850eca6f0"
                    }
                }
            },
            "SetupLocationViewModel": {
                "required": [
                    "name",
                    "contact"
                ],
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Location name",
                        "example": "Test Location"
                    },
                    "uniqueid": {
                        "type": "string",
                        "description": "Location Unique Id",
                        "format": "guid",
                        "nullable": true,
                        "example": "07677a1c-9bd9-40ff-9469-840850eca6f0"
                    },
                    "code": {
                        "type": "string",
                        "description": "Location short name",
                        "example": "Test"
                    },
                    "isGroup": {
                        "type": "boolean",
                        "description": "isGroup",
                        "example": true
                    },
                    "contact": {
                        "$ref": "#/components/schemas/ContactViewModel"
                    }
                }
            },
            "GetJobClassesListSearchResult": {
                "type": "object",
                "required": [
                    "recordsCount",
                    "jobClasses"
                ],
                "properties": {
                    "recordsCount": {
                        "type": "integer",
                        "description": "Total records count",
                        "example": 123
                    },
                    "jobClasses": {
                        "type": "array",
                        "description": "List of job classes",
                        "items": {
                            "$ref": "#/components/schemas/JobClassListItemViewModel"
                        }
                    }
                }
            },
            "SetupJobClassViewModel": {
                "required": [
                    "name",
                    "contact"
                ],
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Job class name",
                        "example": "Test Job class"
                    },
                    "uniqueid": {
                        "type": "string",
                        "description": "Job class Unique Id",
                        "format": "guid",
                        "nullable": true,
                        "example": "07677a1c-9bd9-40ff-9469-840850eca6f0"
                    },
                    "code": {
                        "type": "string",
                        "description": "Job class short name",
                        "example": "Test"
                    },
                    "note": {
                        "type": "string",
                        "description": "Job class note",
                        "example": "Test"
                    },
                    "benefitType": {
                        "type": "string",
                        "description": "benefit Type",
                        "enum": [
                            "Payroll",
                            "SelfPay",
                            "Cobra",
                            "Retiree"
                        ],
                        "example": "Cobra"
                    },
                    "acaEligibleJobClass": {
                        "$ref": "#/components/schemas/JobClassListItemViewModel"
                    },
                    "acaIneligibleJobClass": {
                        "$ref": "#/components/schemas/JobClassListItemViewModel"
                    }
                }
            },
            "JobClassListItemViewModel": {
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Job class name",
                        "example": "Test job class"
                    },
                    "code": {
                        "type": "string",
                        "description": "Job class short name",
                        "example": "Test"
                    },
                    "uniqueid": {
                        "type": "string",
                        "description": "Job class Unique Id",
                        "format": "guid",
                        "nullable": true,
                        "example": "07677a1c-9bd9-40ff-9469-840850eca6f0"
                    }
                }
            },
            "GetProductListSearchResult": {
                "type": "object",
                "description": "Result envelope for querying list of product.",
                "additionalProperties": false,
                "properties": {
                    "recordsCount": {
                        "type": "integer",
                        "description": "Gets/Sets total records count.",
                        "format": "int32"
                    },
                    "products": {
                        "type": "array",
                        "description": "Gets/Sets list of product.",
                        "nullable": true,
                        "xml": {
                            "wrapped": true
                        },
                        "items": {
                            "xml": {
                                "name": "ProductListItemViewModel"
                            },
                            "$ref": "#/components/schemas/ProductListItemViewModel"
                        }
                    }
                }
            },
            "ProductListItemViewModel": {
                "type": "object",
                "description": "Product list item view model.",
                "additionalProperties": false,
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Gets or sets name.",
                        "nullable": true
                    },
                    "uniqueid": {
                        "type": "string",
                        "description": "Gets or sets uniqueid.",
                        "format": "guid",
                        "nullable": true
                    },
                    "payer": {
                        "description": "Gets or sets payer.",
                        "nullable": true,
                        "$ref": "#/components/schemas/PayerViewModel"
                    }
                }
            },
            "PayerViewModel": {
                "type": "object",
                "description": "Payer view model.",
                "additionalProperties": false,
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Gets or sets name.",
                        "nullable": true
                    },
                    "uniqueid": {
                        "type": "string",
                        "description": "Gets or sets uniqueid.",
                        "format": "guid",
                        "nullable": true
                    }
                }
            },
            "GetRateGroupListSearchResult": {
                "type": "object",
                "description": "Result envelope for querying list of rate group.",
                "additionalProperties": false,
                "properties": {
                    "recordsCount": {
                        "type": "integer",
                        "description": "Gets/Sets total records count.",
                        "format": "int32"
                    },
                    "rateGroups": {
                        "type": "array",
                        "description": "Gets/Sets list of rate group.",
                        "nullable": true,
                        "xml": {
                            "wrapped": true
                        },
                        "items": {
                            "xml": {
                                "name": "RateGroupListItemViewModel"
                            },
                            "$ref": "#/components/schemas/RateGroupListItemViewModel"
                        }
                    }
                }
            },
            "RateGroupListItemViewModel": {
                "type": "object",
                "description": "View model for rate group",
                "additionalProperties": false,
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Gets or sets name.",
                        "nullable": true
                    },
                    "uniqueid": {
                        "type": "string",
                        "description": "Gets or sets uniqueid.",
                        "format": "guid",
                        "nullable": true
                    }
                }
            },
            "SetupEnrollmentRulesViewModel": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/SetupBaseViewModel"
                    },
                    {
                        "type": "object",
                        "description": "Enrollment rules view model",
                        "additionalProperties": false,
                        "properties": {
                            "waitingPeriod": {
                                "type": "integer",
                                "description": "Gets or sets the waiting period.",
                                "format": "int32"
                            },
                            "useHireDateToCalcWaitingPeriod": {
                                "type": "boolean",
                                "description": "Gets or sets a value indicating whether [use hire date to calculate waiting period]."
                            },
                            "waitingPeriodType": {
                                "type": "integer",
                                "description": "Gets or sets the type of the waiting period.",
                                "format": "int32"
                            },
                            "gracePeriodType": {
                                "type": "integer",
                                "description": "Gets or sets the type of the grace period.",
                                "format": "int32"
                            },
                            "cutofDay": {
                                "type": "integer",
                                "description": "Gets or sets the cutof day.",
                                "format": "int32"
                            },
                            "effectiveDateCalc": {
                                "type": "integer",
                                "description": "Gets or sets the effective date calculate.",
                                "format": "int32"
                            },
                            "forcePlanEffectiveDateDuringEnrollment": {
                                "type": "boolean",
                                "description": "Gets or sets a value indicating whether [force plan effective date during enrollment]."
                            },
                            "retroactiveEffectiveDate": {
                                "type": "boolean",
                                "description": "Gets or sets a value indicating whether [retroactive effective date]."
                            },
                            "extendGracePeriodToEOM": {
                                "type": "boolean",
                                "description": "Gets or sets a value indicating whether [extend grace period to eom]."
                            },
                            "extendCoverageThroughEndMonth": {
                                "type": "boolean",
                                "description": "Gets or sets a value indicating whether [extend coverage through end month]."
                            },
                            "allowFinishSelfEnrollmentWithoutAgent": {
                                "type": "boolean",
                                "description": "Gets or sets a value indicating whether [allow finish self enrollment without agent]."
                            },
                            "digitizedSignatureAllowed": {
                                "type": "boolean",
                                "description": "Gets or sets a value indicating whether [digitized signature allowed]."
                            },
                            "pinSignatureAllowed": {
                                "type": "boolean",
                                "description": "Gets or sets a value indicating whether [pin signature allowed]."
                            },
                            "voicePrintSignatureAllowed": {
                                "type": "boolean",
                                "description": "Gets or sets a value indicating whether [voice print signature allowed]."
                            },
                            "oneStepSignatureAllowed": {
                                "type": "boolean",
                                "description": "Gets or sets a value indicating whether [one step signature allowed]."
                            },
                            "clickAcceptSignatureAllowed": {
                                "type": "boolean",
                                "description": "Gets or sets a value indicating whether [click accept signature allowed]."
                            },
                            "deductionDateBeforeEffectiveDate": {
                                "type": "integer",
                                "description": "Gets or sets the deduction date before effective date.",
                                "format": "int32"
                            },
                            "deductBeforePlanEffectiveDate": {
                                "type": "boolean",
                                "description": "Gets or sets a value indicating whether [deduct before plan effective date]."
                            },
                            "gracePeriod": {
                                "type": "integer",
                                "description": "Gets or sets the grace period.",
                                "format": "int32"
                            },
                            "gracePeriodStart": {
                                "type": "integer",
                                "description": "Gets or sets the grace period start.",
                                "format": "int32"
                            },
                            "enrollThroughDate": {
                                "type": "string",
                                "description": "Gets or sets the enroll through date.",
                                "format": "date-time"
                            },
                            "effectiveDate": {
                                "type": "string",
                                "description": "Gets or sets the effective date.",
                                "format": "date-time"
                            },
                            "terminateDate": {
                                "type": "string",
                                "description": "Gets or sets the terminate date.",
                                "format": "date-time",
                                "nullable": true
                            },
                            "specialEnrollmentStart": {
                                "description": "Gets or sets the special enrollment start.",
                                "nullable": true
                            },
                            "specialEnrollmentEnd": {
                                "description": "Gets or sets the special enrollment end.",
                                "nullable": true
                            },
                            "applyFTERate": {
                                "type": "boolean",
                                "description": "Gets or sets a value indicating whether [apply fte rate]."
                            },
                            "autoEnroll": {
                                "type": "boolean",
                                "description": "Gets or sets a value indicating whether [automatic enroll]."
                            },
                            "canNotWaive": {
                                "type": "boolean",
                                "description": "Gets or sets a value indicating whether this instance can not waive."
                            },
                            "newCoverageWaive": {
                                "type": "boolean",
                                "description": "Creates new coveragewaive."
                            },
                            "autoReEnroll": {
                                "type": "boolean",
                                "description": "Gets or sets a value indicating whether [automatic re enroll]."
                            },
                            "annualEnrollmentRequired": {
                                "type": "boolean",
                                "description": "Gets or sets a value indicating whether [annual enrollment required]."
                            },
                            "existingCoverageWaive": {
                                "type": "boolean",
                                "description": "Gets or sets a value indicating whether [existing coverage waive]."
                            },
                            "existingCoverageCancelOnly": {
                                "type": "boolean",
                                "description": "Gets or sets a value indicating whether [existing coverage cancel only]."
                            },
                            "ignoreUnconfirmedApplicationRule": {
                                "type": "boolean",
                                "description": "Gets or sets a value indicating whether [ignore unconfirmed application rule]."
                            },
                            "waiveApplicationRule": {
                                "type": "boolean",
                                "description": "Gets or sets a value indicating whether [waive application rule]."
                            },
                            "waiveApplicationNoCoverageRule": {
                                "type": "boolean",
                                "description": "Gets or sets a value indicating whether [waive application no coverage rule]."
                            },
                            "doNotConfirmWaive": {
                                "type": "boolean",
                                "description": "Gets or sets a value indicating whether [do not confirm waive]."
                            },
                            "confirmWaive": {
                                "type": "boolean",
                                "description": "Gets or sets a value indicating whether [confirm waive]."
                            },
                            "confirmWaiveIfNotLateEntrant": {
                                "type": "boolean",
                                "description": "Gets or sets a value indicating whether [confirm waive if not late entrant]."
                            },
                            "showOnEnrollmentSite": {
                                "type": "boolean",
                                "description": "Gets or sets a value indicating whether [show on enrollment site]."
                            },
                            "disableQuickEnroll": {
                                "type": "boolean",
                                "description": "Gets or sets a value indicating whether [disable quick enroll]."
                            },
                            "openYearRound": {
                                "type": "boolean",
                                "description": "Gets or sets a value indicating whether [open year round]."
                            },
                            "sameSexDomesticPartnerAsSpouse": {
                                "type": "boolean",
                                "description": "Gets or sets a value indicating whether [same sex domestic partner as spouse]."
                            },
                            "sameSexDomesticPartnerOverAge": {
                                "type": "integer",
                                "description": "Gets or sets the same sex domestic partner over age.",
                                "format": "int32"
                            },
                            "oppositeSexDomesticPartnerAsSpouse": {
                                "type": "boolean",
                                "description": "Gets or sets a value indicating whether [opposite sex domestic partner as spouse]."
                            },
                            "oppositeSexDomesticPartnerOverAge": {
                                "type": "integer",
                                "description": "Gets or sets the opposite sex domestic partner over age.",
                                "format": "int32"
                            },
                            "domesticPartnerPostTaxOnly": {
                                "type": "boolean",
                                "description": "Gets or sets a value indicating whether [domestic partner post tax only]."
                            },
                            "sameSexSpouse": {
                                "type": "boolean",
                                "description": "Gets or sets a value indicating whether [same sex spouse]."
                            },
                            "adultBenefitRecipientAsSpouse": {
                                "type": "boolean",
                                "description": "Gets or sets a value indicating whether [adult benefit recipient as spouse]."
                            },
                            "section125": {
                                "type": "boolean",
                                "description": "Gets or sets a value indicating whether this SetupEnrollmentRulesViewModel is section125."
                            },
                            "allowSection125Change": {
                                "type": "boolean",
                                "description": "Gets or sets a value indicating whether [allow section125 change]."
                            },
                            "roundFactor": {
                                "type": "number",
                                "description": "Gets or sets the round factor.",
                                "format": "decimal"
                            },
                            "roundingMode": {
                                "description": "Gets or sets the rounding mode.",
                                "oneOf": [
                                    {
                                        "$ref": "#/components/schemas/EnmRoundingMode"
                                    }
                                ]
                            },
                            "premiumRoundingMode": {
                                "description": "Gets or sets the premium rounding mode.",
                                "oneOf": [
                                    {
                                        "$ref": "#/components/schemas/EnmRoundingMode"
                                    }
                                ]
                            },
                            "ageBaseDateCalc": {
                                "description": "Gets or sets the age base date calculate.",
                                "oneOf": [
                                    {
                                        "$ref": "#/components/schemas/EnmAgeBaseDate"
                                    }
                                ]
                            },
                            "defaultDeductionFrequency": {
                                "type": "integer",
                                "description": "Gets or sets the default deduction frequency.",
                                "format": "int32"
                            },
                            "ratesAndFormsState": {
                                "type": "integer",
                                "description": "Gets or sets the state of the rates and forms.",
                                "format": "int32"
                            },
                            "salaryRequired": {
                                "type": "boolean",
                                "description": "Gets or sets a value indicating whether [salary required]."
                            },
                            "insuredSSNRequired": {
                                "type": "boolean",
                                "description": "Gets or sets a value indicating whether [insured SSN required]."
                            },
                            "allowBlankSSN6Mo": {
                                "type": "boolean",
                                "description": "Gets or sets a value indicating whether [allow blank ss n6 mo]."
                            },
                            "onlyPrimaryInsuredSSNRequired": {
                                "type": "boolean",
                                "description": "Gets or sets a value indicating whether [only primary insured SSN required]."
                            },
                            "hoursWorkedRequired": {
                                "type": "boolean",
                                "description": "Gets or sets a value indicating whether [hours worked required]."
                            },
                            "minHoursPerWeekRequired": {
                                "type": "number",
                                "description": "Gets or sets the minimum hours per week required.",
                                "format": "decimal"
                            },
                            "insuredAddressRequired": {
                                "type": "boolean",
                                "description": "Gets or sets a value indicating whether [insured address required]."
                            },
                            "insuredGenderRequired": {
                                "type": "boolean",
                                "description": "Gets or sets a value indicating whether [insured gender required]."
                            },
                            "insuredEmailRequired": {
                                "type": "boolean",
                                "description": "Gets or sets a value indicating whether [insured email required]."
                            },
                            "employeePersonalEmailRequired": {
                                "type": "boolean",
                                "description": "Gets or sets a value indicating whether [employee personal email required]."
                            },
                            "insuredHomePhoneRequired": {
                                "type": "boolean",
                                "description": "Gets or sets a value indicating whether [insured home phone required]."
                            },
                            "insuredWorkPhoneRequired": {
                                "type": "boolean",
                                "description": "Gets or sets a value indicating whether [insured work phone required]."
                            },
                            "employeeMobilePhoneRequired": {
                                "type": "boolean",
                                "description": "Gets or sets a value indicating whether [employee mobile phone required]."
                            },
                            "insuredMaritalStatusRequired": {
                                "type": "boolean",
                                "description": "Gets or sets a value indicating whether [insured marital status required]."
                            },
                            "enrollmentPreSelection": {
                                "description": "Gets or sets the enrollment pre selection.",
                                "oneOf": [
                                    {
                                        "$ref": "#/components/schemas/EnrollmentPreSelection"
                                    }
                                ]
                            },
                            "relationships": {
                                "description": "Gets or sets the relationships.",
                                "nullable": true,
                                "oneOf": [
                                    {
                                        "$ref": "#/components/schemas/RelationshipCCCollection"
                                    }
                                ]
                            },
                            "beneficiaryRequiredPrimary": {
                                "description": "Gets or sets the beneficiary required primary.",
                                "oneOf": [
                                    {
                                        "$ref": "#/components/schemas/InterfaceOption2"
                                    }
                                ]
                            },
                            "beneficiaryRequiredContingent": {
                                "description": "Gets or sets the beneficiary required contingent.",
                                "oneOf": [
                                    {
                                        "$ref": "#/components/schemas/InterfaceOption2"
                                    }
                                ]
                            },
                            "beneficiaryRequiredAddress": {
                                "description": "Gets or sets the beneficiary required address.",
                                "oneOf": [
                                    {
                                        "$ref": "#/components/schemas/InterfaceOption2"
                                    }
                                ]
                            },
                            "beneficiaryRequiredPhone": {
                                "description": "Gets or sets the beneficiary required phone.",
                                "oneOf": [
                                    {
                                        "$ref": "#/components/schemas/InterfaceOption2"
                                    }
                                ]
                            },
                            "beneficiaryRequiredRelationship": {
                                "description": "Gets or sets the beneficiary required relationship.",
                                "oneOf": [
                                    {
                                        "$ref": "#/components/schemas/InterfaceOption2"
                                    }
                                ]
                            },
                            "requiredCountryOfCitizenship": {
                                "description": "Gets or sets the required country of citizenship.",
                                "oneOf": [
                                    {
                                        "$ref": "#/components/schemas/InterfaceOption2"
                                    }
                                ]
                            },
                            "requiredTaxID": {
                                "description": "Gets or sets the required tax identifier.",
                                "oneOf": [
                                    {
                                        "$ref": "#/components/schemas/InterfaceOption2"
                                    }
                                ]
                            },
                            "beneficiaryRequiredSSN": {
                                "description": "Gets or sets the beneficiary required SSN.",
                                "oneOf": [
                                    {
                                        "$ref": "#/components/schemas/InterfaceOption2"
                                    }
                                ]
                            },
                            "beneficiaryRequiredGender": {
                                "description": "Gets or sets the beneficiary required gender.",
                                "oneOf": [
                                    {
                                        "$ref": "#/components/schemas/InterfaceOption2"
                                    }
                                ]
                            },
                            "beneficiaryRequiredBirthDate": {
                                "description": "Gets or sets the beneficiary required birth date.",
                                "oneOf": [
                                    {
                                        "$ref": "#/components/schemas/InterfaceOption2"
                                    }
                                ]
                            },
                            "beneficiaryFirstLastMode": {
                                "type": "boolean",
                                "description": "Gets or sets a value indicating whether [beneficiary first last mode]."
                            },
                            "beneficiaryAgeMode": {
                                "type": "boolean",
                                "description": "Gets or sets a value indicating whether [beneficiary age mode]."
                            },
                            "showLivingChildren": {
                                "type": "boolean",
                                "description": "Gets or sets a value indicating whether [show living children]."
                            },
                            "showEstate": {
                                "type": "boolean",
                                "description": "Gets or sets a value indicating whether [show estate]."
                            },
                            "showSuccessionOfHeirs": {
                                "type": "boolean",
                                "description": "Gets or sets a value indicating whether [show succession of heirs]."
                            }
                        }
                    }
                ]
            },
            "EnmRoundingMode": {
                "type": "string",
                "description": "Enum for rounding.",
                "x-enumNames": [
                    "NoRound",
                    "RoundDown",
                    "Round",
                    "RoundUp",
                    "Math",
                    "Financial"
                ],
                "enum": [
                    "NoRound",
                    "RoundDown",
                    "Round",
                    "RoundUp",
                    "Math",
                    "Financial"
                ]
            },
            "EnmAgeBaseDate": {
                "type": "string",
                "description": "Enum for applicant's age based on date.",
                "x-enumNames": [
                    "LastBirthday",
                    "EndOfThisYear",
                    "EndOfLastYear",
                    "BeginningOfThisYear",
                    "ApplicationDate",
                    "PlanAnniversaryDate"
                ],
                "enum": [
                    "LastBirthday",
                    "EndOfThisYear",
                    "EndOfLastYear",
                    "BeginningOfThisYear",
                    "ApplicationDate",
                    "PlanAnniversaryDate"
                ]
            },
            "EnrollmentPreSelection": {
                "type": "string",
                "description": "Specifies default pre-selection for Apply/Decline choice on application screen for coverage\n'Apply' - Apply coverage option will checked on aplication screen\n'Waive' - Waive coverage option will checked on aplication screen\n'Neither' - Apply and Waive options will unchecked on aplication screen",
                "x-enumNames": [
                    "Apply",
                    "Waive",
                    "Neither"
                ],
                "enum": [
                    "Apply",
                    "Waive",
                    "Neither"
                ]
            },
            "RelationshipCCCollection": {
                "allOf": [
                    {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/RelationshipCC"
                        }
                    },
                    {
                        "type": "object",
                        "description": "The RelationshipCCCollection object creates a list of relationships.",
                        "additionalProperties": false,
                        "properties": {
                            "Item": {
                                "nullable": true,
                                "oneOf": [
                                    {
                                        "$ref": "#/components/schemas/RelationshipCC"
                                    }
                                ]
                            }
                        }
                    }
                ]
            },
            "RelationshipCC": {
                "type": "object",
                "description": "Specifies the relationships existing between the applicant and beneficiaries.",
                "additionalProperties": false,
                "properties": {
                    "IsPrimary": {
                        "type": "boolean",
                        "description": "Gets or sets if this relationship can be primary insured.",
                        "default": true
                    },
                    "IsEnabled": {
                        "type": "boolean",
                        "description": "Gets or sets if this relationship enabled.",
                        "default": true
                    },
                    "Relationship": {
                        "description": "Gets or sets the relationship.",
                        "default": 11,
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/Relationship"
                            }
                        ]
                    },
                    "LegalStatus": {
                        "description": "Gets or sets the legal status.",
                        "default": 1100,
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/LegalStatus"
                            }
                        ]
                    },
                    "Label": {
                        "type": "string",
                        "description": "The Label object specifies the name of the relationship. Can be used to override the default name.",
                        "nullable": true
                    },
                    "RequiredSSN": {
                        "description": "The RequiredSSN object displays if the information is required. ",
                        "default": 0,
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/InterfaceOption"
                            }
                        ]
                    },
                    "IgnoreRequireSSN6Month": {
                        "type": "boolean",
                        "description": "The IgnoreRequireSSN6Month object specifies whether the RequiredSSN option can be ignored for dependents who are age 6 months or less.",
                        "default": false
                    },
                    "RequiredStudent": {
                        "description": "The RequiredStudent object displays if the information is required. ",
                        "default": 0,
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/InterfaceOption"
                            }
                        ]
                    },
                    "RequiredDisabled": {
                        "description": "The RequiredDisabled object displays if the information is required. ",
                        "default": 0,
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/InterfaceOption"
                            }
                        ]
                    },
                    "RequiredAddress": {
                        "description": "The RequiredAddress object displays if the information is required. ",
                        "default": 0,
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/InterfaceOption"
                            }
                        ]
                    },
                    "RequiredEmail": {
                        "description": "The RequiredEmail object displays if the information is required. ",
                        "default": 0,
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/InterfaceOption"
                            }
                        ]
                    },
                    "UWLimits": {
                        "description": "Gets or sets the UW limits.",
                        "nullable": true,
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/UWlimitCCCollection"
                            }
                        ]
                    },
                    "MinAge": {
                        "type": "number",
                        "description": "The MinAge object specifies if the applicant meets the standardized minimum age for an applicant.",
                        "format": "decimal",
                        "nullable": true
                    },
                    "MaxAge": {
                        "type": "number",
                        "description": "The MaxAge object specifies if the applicant has reached the maximum age limit for continued coverage.",
                        "format": "decimal",
                        "nullable": true
                    },
                    "PartTimeAsFullTimeStudent": {
                        "type": "boolean",
                        "description": "The PartTimeAsFullTimeStudent object specifies if the applicant is a part-time as full-time student.",
                        "default": false
                    },
                    "MaxStudentAge": {
                        "type": "number",
                        "description": "The MaxStudentAge object specifies if the applicant has reached the maximum age allowed for a student.",
                        "format": "decimal",
                        "nullable": true
                    },
                    "MaxDisabledAge": {
                        "type": "number",
                        "description": "The MaxDisabledAge object specifies the maximum age of a disabled student.",
                        "format": "decimal",
                        "nullable": true
                    },
                    "DomesticPartnerEligibility": {
                        "type": "string",
                        "description": "The DomesticPartnerEligibility object specifies if the applicant's domestic partner is eligible for coverage.",
                        "nullable": true
                    },
                    "BeneficiaryRequiredPrimary": {
                        "description": "Sets the BeneficiaryRequiredPrimary field to 'Not Shown'.",
                        "default": 1,
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/InterfaceOption"
                            }
                        ]
                    },
                    "DependentVerificationDocuments": {
                        "type": "array",
                        "description": "Gets or sets the DependentVerificationDocuments.",
                        "nullable": true,
                        "items": {
                            "$ref": "#/components/schemas/DependentVerificationDocumentWrapper"
                        }
                    }
                }
            },
            "InterfaceOption": {
                "type": "integer",
                "description": "Mode of current accessibility to an object.",
                "x-enumNames": [
                    "Unknown",
                    "NotShown",
                    "Required",
                    "Optional",
                    "RequiredIfNew",
                    "ReadOnly",
                    "ReadOnlyIfNotNull"
                ],
                "enum": [
                    0,
                    1,
                    2,
                    3,
                    4,
                    5,
                    6
                ]
            },
            "UWlimitCCCollection": {
                "type": "array",
                "description": "List of underwriting limits",
                "items": {
                    "$ref": "#/components/schemas/UWLimitCC"
                }
            },
            "UWLimitCC": {
                "type": "object",
                "description": "Underwriting limits info",
                "additionalProperties": false,
                "properties": {
                    "UnderwritingMode": {
                        "description": "Gets or sets the question underwriting mode.\n0 - Always Shown/No Underwriting\n1 - GI\n2 - MGI\n3 - SI",
                        "default": 0,
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/UnderwritingMode"
                            }
                        ]
                    },
                    "BenefitLevel": {
                        "type": "string",
                        "description": "Gets or sets the benefit level.",
                        "nullable": true
                    },
                    "MinAge": {
                        "type": "number",
                        "description": "The MinAge object specifies if the applicant meets the standardized minimum age for an applicant.",
                        "format": "decimal",
                        "nullable": true
                    },
                    "MaxAge": {
                        "type": "number",
                        "description": "The MaxAge object specifies if the applicant has reached the maximum age limit for continued coverage.",
                        "format": "decimal",
                        "nullable": true
                    },
                    "MinPremium": {
                        "type": "number",
                        "description": "The MinPremium object specifies if the applicant meets the standardized minimum age for an applicant.",
                        "format": "decimal",
                        "nullable": true
                    },
                    "MaxPremium": {
                        "type": "number",
                        "description": "The MaxPremium object specifies if the applicant has reached the maximum age limit for continued coverage.",
                        "format": "decimal",
                        "nullable": true
                    },
                    "MinAmount": {
                        "type": "number",
                        "description": "The MinAmount object specifies if the applicant meets the standardized minimum age for an applicant.",
                        "format": "decimal",
                        "nullable": true
                    },
                    "MaxAmount": {
                        "type": "number",
                        "description": "The MaxAmount object specifies if the applicant has reached the maximum age limit for continued coverage.",
                        "format": "decimal",
                        "nullable": true
                    },
                    "MinSalaryMultiplier": {
                        "type": "number",
                        "description": "The MinSalaryMultiplier object specifies if the applicant meets the standardized minimum age for an applicant.",
                        "format": "decimal",
                        "nullable": true
                    },
                    "MaxSalaryMultiplier": {
                        "type": "number",
                        "description": "The MaxSalaryMultiplier object specifies if the applicant has reached the maximum age limit for continued coverage.",
                        "format": "decimal",
                        "nullable": true
                    },
                    "MaxStudentAge": {
                        "type": "number",
                        "description": "The MaxStudentAge object specifies if the applicant has reached the maximum age allowed for a student.",
                        "format": "decimal",
                        "nullable": true
                    },
                    "MaxDisabledAge": {
                        "type": "number",
                        "description": "The MaxDisabledAge object specifies the maximum age of a disabled student.",
                        "format": "decimal",
                        "nullable": true
                    },
                    "AdditionalBenefitAmount": {
                        "type": "number",
                        "description": "Gets or sets an additional benefit amount.",
                        "format": "decimal",
                        "nullable": true
                    },
                    "StepDown": {
                        "type": "number",
                        "description": "Gets or sets a benefit amount step down.",
                        "format": "decimal",
                        "nullable": true
                    }
                }
            },
            "UnderwritingMode": {
                "type": "integer",
                "description": "Enum. Indicates the underwriting mode of application.",
                "x-enumNames": [
                    "Unknown",
                    "Gi",
                    "Cgi",
                    "Si"
                ],
                "enum": [
                    0,
                    1,
                    2,
                    3
                ]
            },
            "DependentVerificationDocumentWrapper": {
                "type": "object",
                "description": "Class DependentVerificationDocumentWrapper.",
                "additionalProperties": false,
                "properties": {
                    "DocumentType": {
                        "description": "The document type",
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/DependentVerificationDocument"
                            }
                        ]
                    }
                }
            },
            "DependentVerificationDocument": {
                "type": "integer",
                "description": "Enum DependentVerificationDocument",
                "x-enumNames": [
                    "NoDocumentationProvided",
                    "AdoptionPapers",
                    "BirthCertificate",
                    "CourtOrder",
                    "DomesticPartnerAffidavit",
                    "DriversLicense",
                    "LegalGuardianshipPapers",
                    "InsuranceCard",
                    "MarriageCertificate",
                    "Passport",
                    "SocialSecurityCard",
                    "UtilityBill",
                    "OtherApprovedDocument",
                    "TaxReturn",
                    "MortgageStatement",
                    "MarriageLicenseApplication",
                    "VerificationLetter",
                    "ClassSchedule",
                    "CanceledCheck",
                    "GrandchildAffidavitVerificationDocument",
                    "CommonLawMarriageAffidavit",
                    "IRSMarriageCert",
                    "MarriageCertUtilityBill",
                    "IRSBirthCert",
                    "BirthCertCourtDocsForAdoptedChildren",
                    "BirthCertMedicalDisabilityCert",
                    "IRSMedicalDisabilityCert",
                    "AffidavitToVerifySpouse",
                    "IRSSeparationAgreement",
                    "DomesticPartnerAffidavitJointMortgage",
                    "DomesticPartnerAffidavitJointBank",
                    "DomesticPartnerAffidavitDriversLicense",
                    "NaturalizationCertBirthAbroad",
                    "NaturalCertBirthAbroadMedDisabilityCert",
                    "AdoptionPapersMedicalDisabilityCert",
                    "LegalPapersMedicalDisabilityCert",
                    "IRSDomesticPartnerAffidavit",
                    "UtilityDomesticPartnerAffidavit",
                    "Other"
                ],
                "enum": [
                    0,
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    13,
                    14,
                    15,
                    16,
                    17,
                    18,
                    19,
                    20,
                    21,
                    22,
                    23,
                    24,
                    25,
                    26,
                    27,
                    28,
                    29,
                    30,
                    31,
                    32,
                    33,
                    34,
                    35,
                    36,
                    37,
                    2147483647
                ]
            },
            "InterfaceOption2": {
                "type": "string",
                "description": "Mode of current accessibility to an object.",
                "x-enumNames": [
                    "Unknown",
                    "NotShown",
                    "Required",
                    "Optional",
                    "RequiredIfNew",
                    "ReadOnly",
                    "ReadOnlyIfNotNull"
                ],
                "enum": [
                    "Unknown",
                    "NotShown",
                    "Required",
                    "Optional",
                    "RequiredIfNew",
                    "ReadOnly",
                    "ReadOnlyIfNotNull"
                ]
            },
            "GetEligibleProductsListSearchResult": {
                "type": "object",
                "required": [
                    "recordsCount",
                    "eligibleProducts"
                ],
                "properties": {
                    "recordsCount": {
                        "type": "integer",
                        "description": "Total records count",
                        "example": 123
                    },
                    "eligibleProducts": {
                        "type": "array",
                        "description": "List of eligible products",
                        "items": {
                            "$ref": "#/components/schemas/EligibleProductListItemViewModel"
                        }
                    }
                }
            },
            "EligibleProductListItemViewModel": {
                "properties": {
                    "uniqueid": {
                        "type": "string",
                        "description": "Eligible product Unique Id",
                        "format": "guid",
                        "nullable": true,
                        "example": "07677a1c-9bd9-40ff-9469-840850eca6f0"
                    },
                    "product": {
                        "$ref": "#/components/schemas/SetupBaseViewModel"
                    },
                    "location": {
                        "$ref": "#/components/schemas/SetupBaseViewModel"
                    },
                    "jobClass": {
                        "$ref": "#/components/schemas/SetupBaseViewModel"
                    }
                }
            },
            "PayrollDeductionViewModel": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "employeeIdent": {
                        "type": "string",
                        "description": "Employee Ident",
                        "nullable": true
                    },
                    "deductionCode": {
                        "type": "string",
                        "description": "Deduction Code",
                        "nullable": true
                    },
                    "deductionName": {
                        "type": "string",
                        "description": "Deduction Name",
                        "nullable": true
                    },
                    "deductionType": {
                        "type": "string",
                        "description": "Deduction Type",
                        "nullable": true
                    },
                    "deductionSubcode": {
                        "type": "string",
                        "description": "Deduction Subcode",
                        "nullable": true
                    },
                    "DeductionSubtype": {
                        "type": "string",
                        "description": "Deduction Subtype",
                        "nullable": true
                    },
                    "deductionFrequency": {
                        "type": "integer",
                        "description": "Deduction Frequency",
                        "format": "int32"
                    },
                    "employeePretax": {
                        "type": "number",
                        "description": "Employee Pre-tax",
                        "format": "decimal"
                    },
                    "employeePosttax": {
                        "type": "number",
                        "description": "Employee Post-tax",
                        "format": "decimal"
                    },
                    "employerCost": {
                        "type": "number",
                        "description": "Employer Cost",
                        "format": "decimal"
                    },
                    "startDate": {
                        "type": "string",
                        "description": "Start Date",
                        "format": "date-time"
                    },
                    "endDate": {
                        "type": "string",
                        "description": "End Date",
                        "format": "date-time",
                        "nullable": true
                    }
                }
            },
            "IEmployeePushNotification": {
                "type": "object",
                "description": "Employee Web Hook payload interface.",
                "x-abstract": true,
                "required": [
                    "siteUid",
                    "groupUid",
                    "employeeUid",
                    "latestChangeDate"
                ],
                "properties": {
                    "siteUri": {
                        "type": "string",
                        "description": "Gets or sets Web API base Uri."
                    },
                    "siteUid": {
                        "type": "string",
                        "description": "Gets or sets infrastructure SiteGuid.",
                        "format": "guid"
                    },
                    "groupNumber": {
                        "type": "string",
                        "description": "Gets or sets external group number (recipient-defined)."
                    },
                    "groupUid": {
                        "type": "string",
                        "description": "Gets or sets unique identifier of the group (Case).",
                        "format": "guid"
                    },
                    "employeeUid": {
                        "type": "string",
                        "description": "Gets or sets unique identifier of the employee.",
                        "format": "guid"
                    },
                    "personUid": {
                        "type": "string",
                        "description": "Gets or sets unique identifier of the employee person.",
                        "format": "guid"
                    },
                    "latestChangeDate": {
                        "type": "string",
                        "description": "Gets or sets date and time of the last change.",
                        "format": "date-time"
                    },
                    "employment": {
                        "type": "array",
                        "description": "Gets or sets a list of employment changes.",
                        "items": {
                            "$ref": "#/components/schemas/IEmploymentPushNotificationInfo"
                        }
                    },
                    "demographic": {
                        "type": "array",
                        "description": "Gets or sets the list of demographic changes.",
                        "items": {
                            "$ref": "#/components/schemas/IDemographicPushNotificationInfo"
                        }
                    },
                    "dependents": {
                        "type": "array",
                        "description": "Gets or sets a list of changes for the employee dependents.",
                        "items": {
                            "$ref": "#/components/schemas/IEmployeeDependentPushNotificationInfo"
                        }
                    },
                    "coverage": {
                        "type": "array",
                        "description": "Gets or sets a list of changes in the employee coverage.",
                        "items": {
                            "$ref": "#/components/schemas/ICoveragePushNotificationInfo"
                        }
                    }
                }
            },
            "IEmploymentPushNotificationInfo": {
                "type": "object",
                "description": "Employee Web Hook employment change interface.",
                "x-abstract": true,
                "required": [
                    "typeOfChange",
                    "changeDate",
                    "effectiveDate"
                ],
                "properties": {
                    "typeOfChange": {
                        "description": "Gets or sets the type of employment change. ",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/EmploymentChangeType"
                            }
                        ]
                    },
                    "changeDate": {
                        "type": "string",
                        "description": "Gets or sets the date and time of the change.",
                        "format": "date-time"
                    },
                    "effectiveDate": {
                        "type": "string",
                        "description": "Gets or sets the effective date and time of the change.",
                        "format": "date-time"
                    }
                }
            },
            "EmploymentChangeType": {
                "type": "string",
                "description": "Web Hook employment change types.",
                "x-enumNames": [
                    "NewHire",
                    "ClassChange",
                    "PayGroupChange",
                    "SalaryChange",
                    "Transfer",
                    "StatusChange",
                    "HireDateChange",
                    "EligibilityDateChange",
                    "TerminationDateChange",
                    "Termination"
                ],
                "enum": [
                    "newHire",
                    "classChange",
                    "payGroupChange",
                    "salaryChange",
                    "transfer",
                    "statusChange",
                    "hireDateChange",
                    "eligibilityDateChange",
                    "terminationDateChange",
                    "termination"
                ]
            },
            "IDemographicPushNotificationInfo": {
                "type": "object",
                "description": "Employee Web Hook demographic change interface.",
                "x-abstract": true,
                "required": [
                    "typeOfChange",
                    "changeDate",
                    "effectiveDate"
                ],
                "properties": {
                    "typeOfChange": {
                        "description": "Gets or sets the type of demographic change. ",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/DemographicChangeType"
                            }
                        ]
                    },
                    "changeDate": {
                        "type": "string",
                        "description": "Gets or sets the date and time of the change.",
                        "format": "date-time"
                    },
                    "effectiveDate": {
                        "type": "string",
                        "description": "Gets or sets the effective date and time of the change.",
                        "format": "date-time"
                    }
                }
            },
            "DemographicChangeType": {
                "type": "string",
                "description": "Web Hook demographic change types.",
                "x-enumNames": [
                    "Unknown",
                    "New",
                    "NameChange",
                    "AddressChange",
                    "EmailAddressChange",
                    "PhoneChange",
                    "DobChange",
                    "SsnChange",
                    "GenderChange",
                    "MaritalStatusChange",
                    "SmokerStatusChange"
                ],
                "enum": [
                    "unknown",
                    "new",
                    "nameChange",
                    "addressChange",
                    "emailAddressChange",
                    "phoneChange",
                    "dobChange",
                    "ssnChange",
                    "genderChange",
                    "maritalStatusChange",
                    "smokerStatusChange"
                ]
            },
            "IEmployeeDependentPushNotificationInfo": {
                "type": "object",
                "description": "Employee Web Hook dependent person change interface.",
                "x-abstract": true,
                "required": [
                    "personUid",
                    "relationship",
                    "typeOfChange",
                    "changeDate",
                    "effectiveDate"
                ],
                "properties": {
                    "personUid": {
                        "type": "string",
                        "description": "Gets or sets unique identifier of the employee dependent person.",
                        "format": "guid"
                    },
                    "relationship": {
                        "description": "Gets or sets dependent person relationship to the employee.",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/Relationship"
                            }
                        ]
                    },
                    "typeOfChange": {
                        "description": "Gets or sets the type of the employee dependent person change.",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/DependentChangeType"
                            }
                        ]
                    },
                    "changeDate": {
                        "type": "string",
                        "description": "Gets or sets the date and time of the change.",
                        "format": "date-time"
                    },
                    "effectiveDate": {
                        "type": "string",
                        "description": "Gets or sets the effective date and time of the change.",
                        "format": "date-time"
                    }
                }
            },
            "DependentChangeType": {
                "type": "string",
                "description": "Web Hook employee dependent person change types.",
                "x-enumNames": [
                    "Unknown",
                    "New",
                    "NameChange",
                    "DobChange",
                    "SsnChange",
                    "GenderChange",
                    "SmokerStatusChange",
                    "Deleted"
                ],
                "enum": [
                    "unknown",
                    "new",
                    "nameChange",
                    "dobChange",
                    "ssnChange",
                    "genderChange",
                    "smokerStatusChange",
                    "deleted"
                ]
            },
            "ICoveragePushNotificationInfo": {
                "type": "object",
                "description": "Employee Web Hook coverage change interface.",
                "x-abstract": true,
                "required": [
                    "coverageUid",
                    "typeOfChange",
                    "changeDate",
                    "effectiveDate"
                ],
                "properties": {
                    "coverageUid": {
                        "type": "string",
                        "description": "Gets or sets unique identifier of the employee coverage record.",
                        "format": "guid"
                    },
                    "typeOfChange": {
                        "description": "Gets or sets the type of the employee coverage change.",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/CoverageChangeType"
                            }
                        ]
                    },
                    "changeDate": {
                        "type": "string",
                        "description": "Gets or sets the date and time of the change.",
                        "format": "date-time"
                    },
                    "effectiveDate": {
                        "type": "string",
                        "description": "Gets or sets the effective date of the coverage.",
                        "format": "date-time"
                    },
                    "terminationDate": {
                        "type": "string",
                        "description": "Gets or sets the termination date of the coverage in case of\ntermination of employee benefits.",
                        "format": "date-time"
                    }
                }
            },
            "CoverageChangeType": {
                "type": "string",
                "description": "Web Hook employee coverage change types.",
                "x-enumNames": [
                    "New",
                    "Change",
                    "Termination"
                ],
                "enum": [
                    "new",
                    "change",
                    "termination"
                ]
            },
            "IGroupSetupPushNotification": {
                "type": "object",
                "description": "Group Setup Web Hook interface.",
                "x-abstract": true,
                "additionalProperties": false,
                "properties": {
                    "siteUri": {
                        "type": "string",
                        "description": "Gets or sets Web API base Uri.",
                        "nullable": true
                    },
                    "siteUid": {
                        "type": "string",
                        "description": "Gets or sets infrastructure SiteGuid.",
                        "format": "guid"
                    },
                    "groupNumber": {
                        "type": "string",
                        "description": "Gets or sets external Group number (recipient-defined).",
                        "nullable": true
                    },
                    "groupName": {
                        "type": "string",
                        "description": "Gets or sets Group (Case) Name.",
                        "nullable": true
                    },
                    "groupUid": {
                        "type": "string",
                        "description": "Gets or sets unique identifier of the Group (Case).",
                        "format": "guid"
                    },
                    "latestChangeDate": {
                        "type": "string",
                        "description": "Gets or sets date and time of the last change.",
                        "format": "date-time"
                    },
                    "setup": {
                        "type": "array",
                        "description": "Gets or sets a list of changes for the Group (Case) Setup.",
                        "nullable": true,
                        "items": {
                            "$ref": "#/components/schemas/IGroupSetupPushNotificationInfo"
                        }
                    },
                    "locations": {
                        "type": "array",
                        "description": "Gets or sets a list of changes for the Group (Case) Locations.",
                        "nullable": true,
                        "items": {
                            "$ref": "#/components/schemas/ILocationPushNotificationInfo"
                        }
                    },
                    "departments": {
                        "type": "array",
                        "description": "Gets or sets a list of changes for the Group (Case) Departments.",
                        "nullable": true,
                        "items": {
                            "$ref": "#/components/schemas/IDepartmentPushNotificationInfo"
                        }
                    },
                    "jobClasses": {
                        "type": "array",
                        "description": "Gets or sets a list of changes for the Group (Case) Job Classes.",
                        "nullable": true,
                        "items": {
                            "$ref": "#/components/schemas/IJobClassPushNotificationInfo"
                        }
                    },
                    "payGroups": {
                        "type": "array",
                        "description": "Gets or sets a list of changes for the Group (Case) Pay Groups.",
                        "nullable": true,
                        "items": {
                            "$ref": "#/components/schemas/IPayGroupPushNotificationInfo"
                        }
                    },
                    "edi": {
                        "type": "array",
                        "description": "Gets or sets a list of changes for the Group (Case) EDI parameters.",
                        "nullable": true,
                        "items": {
                            "$ref": "#/components/schemas/IEdiPushNotificationInfo"
                        }
                    },
                    "plans": {
                        "type": "array",
                        "description": "Gets or sets a list of changes for the Group (Case) Plans.",
                        "nullable": true,
                        "items": {
                            "$ref": "#/components/schemas/IPlanPushNotificationInfo"
                        }
                    }
                }
            },
            "IGroupSetupPushNotificationInfo": {
                "type": "object",
                "description": "Group (Case) Setup change Web Hook interface.",
                "x-abstract": true,
                "additionalProperties": false,
                "properties": {
                    "customFieldUid": {
                        "type": "string",
                        "description": "Gets or sets unique identifier of Group (Case) Setup custom field.",
                        "format": "guid",
                        "nullable": true
                    },
                    "groupType": {
                        "description": "Gets or sets Group (Case) type.",
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/CaseType"
                            }
                        ]
                    },
                    "typeOfChange": {
                        "description": "Gets or sets the type of Group (Case) Setup change.",
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/GroupSetupChangeType"
                            }
                        ]
                    },
                    "changeDate": {
                        "type": "string",
                        "description": "Gets or sets the date and time of the change.",
                        "format": "date-time"
                    },
                    "effectiveDate": {
                        "type": "string",
                        "description": "Gets or sets the effective date and time of the change.",
                        "format": "date-time"
                    }
                }
            },
            "CaseType": {
                "type": "string",
                "description": "Case type",
                "x-enumNames": [
                    "Production",
                    "Training",
                    "Demo",
                    "Test",
                    "Archive"
                ],
                "enum": [
                    "production",
                    "training",
                    "demo",
                    "test",
                    "archive"
                ]
            },
            "GroupSetupChangeType": {
                "type": "string",
                "description": "Group (Case) Setup change types.",
                "x-enumNames": [
                    "Unknown",
                    "General",
                    "CustomField"
                ],
                "enum": [
                    "unknown",
                    "general",
                    "customField"
                ]
            },
            "ILocationPushNotificationInfo": {
                "type": "object",
                "description": "Group (Case) Location change Web Hook interface.",
                "x-abstract": true,
                "additionalProperties": false,
                "properties": {
                    "locationUid": {
                        "type": "string",
                        "description": "Gets or sets unique identifier of Location.",
                        "format": "guid"
                    },
                    "typeOfChange": {
                        "description": "Gets or sets the type of Location change.",
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/LocationChangeType"
                            }
                        ]
                    },
                    "changeDate": {
                        "type": "string",
                        "description": "Gets or sets the date and time of the change.",
                        "format": "date-time"
                    },
                    "effectiveDate": {
                        "type": "string",
                        "description": "Gets or sets the effective date and time of the change.",
                        "format": "date-time"
                    }
                }
            },
            "LocationChangeType": {
                "type": "string",
                "description": "Group (Case) Location change types.",
                "x-enumNames": [
                    "Unknown",
                    "New",
                    "Change",
                    "Delete"
                ],
                "enum": [
                    "unknown",
                    "new",
                    "change",
                    "delete"
                ]
            },
            "IDepartmentPushNotificationInfo": {
                "type": "object",
                "description": "Group (Case) Department change Web Hook interface.",
                "x-abstract": true,
                "additionalProperties": false,
                "properties": {
                    "departmentUid": {
                        "type": "string",
                        "description": "Gets or sets unique identifier of Department.",
                        "format": "guid"
                    },
                    "typeOfChange": {
                        "description": "Gets or sets the type of Department change.",
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/DepartmentChangeType"
                            }
                        ]
                    },
                    "changeDate": {
                        "type": "string",
                        "description": "Gets or sets the date and time of the change.",
                        "format": "date-time"
                    },
                    "effectiveDate": {
                        "type": "string",
                        "description": "Gets or sets the effective date and time of the change.",
                        "format": "date-time"
                    }
                }
            },
            "DepartmentChangeType": {
                "type": "string",
                "description": "Group (Case) Department change types.",
                "x-enumNames": [
                    "Unknown",
                    "New",
                    "Change",
                    "Delete"
                ],
                "enum": [
                    "unknown",
                    "new",
                    "change",
                    "delete"
                ]
            },
            "IJobClassPushNotificationInfo": {
                "type": "object",
                "description": "Group (Case) JobClass change Web Hook interface.",
                "x-abstract": true,
                "additionalProperties": false,
                "properties": {
                    "jobClassUid": {
                        "type": "string",
                        "description": "Gets or sets unique identifier of JobClass.",
                        "format": "guid"
                    },
                    "typeOfChange": {
                        "description": "Gets or sets the type of JobClass change.",
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/JobClassChangeType"
                            }
                        ]
                    },
                    "changeDate": {
                        "type": "string",
                        "description": "Gets or sets the date and time of the change.",
                        "format": "date-time"
                    },
                    "effectiveDate": {
                        "type": "string",
                        "description": "Gets or sets the effective date and time of the change.",
                        "format": "date-time"
                    }
                }
            },
            "JobClassChangeType": {
                "type": "string",
                "description": "Group (Case) JobClass change types.",
                "x-enumNames": [
                    "Unknown",
                    "New",
                    "Change",
                    "Delete"
                ],
                "enum": [
                    "unknown",
                    "new",
                    "change",
                    "delete"
                ]
            },
            "IPayGroupPushNotificationInfo": {
                "type": "object",
                "description": "Group (Case) PayGroup change Web Hook interface.",
                "x-abstract": true,
                "additionalProperties": false,
                "properties": {
                    "payGroupUid": {
                        "type": "string",
                        "description": "Gets or sets unique identifier of PayGroup.",
                        "format": "guid"
                    },
                    "typeOfChange": {
                        "description": "Gets or sets the type of PayGroup change.",
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/PayGroupChangeType"
                            }
                        ]
                    },
                    "changeDate": {
                        "type": "string",
                        "description": "Gets or sets the date and time of the change.",
                        "format": "date-time"
                    },
                    "effectiveDate": {
                        "type": "string",
                        "description": "Gets or sets the effective date and time of the change.",
                        "format": "date-time"
                    }
                }
            },
            "PayGroupChangeType": {
                "type": "string",
                "description": "Group (Case) PayGroup change types.",
                "x-enumNames": [
                    "Unknown",
                    "New",
                    "Change",
                    "Delete"
                ],
                "enum": [
                    "unknown",
                    "new",
                    "change",
                    "delete"
                ]
            },
            "IEdiPushNotificationInfo": {
                "type": "object",
                "description": "Group (Case) EDI change Web Hook interface.",
                "x-abstract": true,
                "additionalProperties": false,
                "properties": {
                    "ediUid": {
                        "type": "string",
                        "description": "Gets or sets unique identifier of Edi.",
                        "format": "guid"
                    },
                    "typeOfChange": {
                        "description": "Gets or sets the type of EDI change.",
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/EdiChangeType"
                            }
                        ]
                    },
                    "changeDate": {
                        "type": "string",
                        "description": "Gets or sets the date and time of the change.",
                        "format": "date-time"
                    },
                    "effectiveDate": {
                        "type": "string",
                        "description": "Gets or sets the effective date and time of the change.",
                        "format": "date-time"
                    }
                }
            },
            "EdiChangeType": {
                "type": "string",
                "description": "Group (Case) EDI change types.",
                "x-enumNames": [
                    "Unknown",
                    "New",
                    "Change",
                    "Delete"
                ],
                "enum": [
                    "unknown",
                    "new",
                    "change",
                    "delete"
                ]
            },
            "IPlanPushNotificationInfo": {
                "type": "object",
                "description": "Group (Case) Plan change Web Hook interface.",
                "x-abstract": true,
                "additionalProperties": false,
                "properties": {
                    "planUid": {
                        "type": "string",
                        "description": "Gets or sets unique identifier of Plan.",
                        "format": "guid"
                    },
                    "typeOfChange": {
                        "description": "Gets or sets the type of Plan change.",
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/PlanChangeType"
                            }
                        ]
                    },
                    "changeDate": {
                        "type": "string",
                        "description": "Gets or sets the date and time of the change.",
                        "format": "date-time"
                    },
                    "effectiveDate": {
                        "type": "string",
                        "description": "Gets or sets the effective date and time of the change.",
                        "format": "date-time"
                    }
                }
            },
            "PlanChangeType": {
                "type": "string",
                "description": "Group (Case) Plan change types.",
                "x-enumNames": [
                    "Unknown",
                    "New",
                    "Change",
                    "Delete"
                ],
                "enum": [
                    "unknown",
                    "new",
                    "change",
                    "delete"
                ]
            },
            "ISiteSetupPushNotification": {
                "type": "object",
                "description": "Site setup Global Web Hook interface.",
                "x-abstract": true,
                "required": [
                    "siteUid",
                    "latestChangeDate"
                ],
                "properties": {
                    "siteUri": {
                        "type": "string",
                        "description": "Gets or sets Web API base Uri."
                    },
                    "siteUid": {
                        "type": "string",
                        "description": "Gets or sets infrastructure SiteGuid.",
                        "format": "guid"
                    },
                    "latestChangeDate": {
                        "type": "string",
                        "description": "Gets or sets date and time of the last change.",
                        "format": "date-time"
                    },
                    "groups": {
                        "type": "array",
                        "description": "Gets or sets a list of changes for the Groups (Cases) on the same\nSite.",
                        "items": {
                            "$ref": "#/components/schemas/IGroupPushNotificationInfo"
                        }
                    }
                }
            },
            "IGroupPushNotificationInfo": {
                "type": "object",
                "description": "Site setup Global Group (Case) Web Hook change interface.",
                "x-abstract": true,
                "required": [
                    "groupUid",
                    "typeOfChange",
                    "changeDate",
                    "effectiveDate"
                ],
                "properties": {
                    "groupName": {
                        "type": "string",
                        "description": "Gets or sets Group (Case) Name."
                    },
                    "groupUid": {
                        "type": "string",
                        "description": "Gets or sets unique identifier of Group (Case).",
                        "format": "guid"
                    },
                    "typeOfChange": {
                        "description": "Gets or sets the type of Group (Case) change.",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/GroupChangeType"
                            }
                        ]
                    },
                    "changeDate": {
                        "type": "string",
                        "description": "Gets or sets the date and time of the change.",
                        "format": "date-time"
                    },
                    "effectiveDate": {
                        "type": "string",
                        "description": "Gets or sets the effective date and time of the change.",
                        "format": "date-time"
                    }
                }
            },
            "GroupChangeType": {
                "type": "string",
                "description": "Global Web Hook Group (Case) change types.",
                "x-enumNames": [
                    "Unknown",
                    "New",
                    "TypeChange",
                    "Deleted"
                ],
                "enum": [
                    "unknown",
                    "new",
                    "typeChange",
                    "deleted"
                ]
            }
        }
    }
}
